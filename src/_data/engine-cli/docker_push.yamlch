%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
command: docker push
short: Push an image or a repository to a registry
@y
command: docker push
short: リポジトリまたはレジストリに対してイメージをプッシュします。
@z

@x
long: |-
  Use `docker image push` to share your images to the [Docker Hub](https://hub.docker.com)
  registry or to a self-hosted one.
@y
long: |-
  [Docker Hub](https://hub.docker.com) レジストリや独自レジストリに対して`docker image push`を実行することで、そのイメージを共有することができます。
@z

@x
  Refer to the [`docker image tag`](tag.md) reference for more information about valid
  image and tag names.
@y
  適正なイメージ名やタグ名についての詳細は [`docker image tag`](tag.md) リファレンスを参照してください。
@z

@x
  Killing the `docker image push` process, for example by pressing `CTRL-c` while it is
  running in a terminal, terminates the push operation.
@y
  `docker image push`を実行した端末上において、たとえば`CTRL-c`を押下してプロセスを kill した場合、プッシュ処理は停止します。
@z

@x
  Progress bars are shown during docker push, which show the uncompressed size.
  The actual amount of data that's pushed will be compressed before sending, so
  the uploaded size will not be reflected by the progress bar.
@y
  プッシュ処理中にはプログレスバーが表示され、非圧縮時のサイズが示されます。
  プッシュされるデータは送信前に圧縮されるため、実際にアップロードされたサイズはプログレスバー上には反映されません。
@z

@x
  Registry credentials are managed by [docker login](login.md).
@y
  レジストリの資格情報は [docker login](login.md) を用いて管理されます。
@z

@x
  ### Concurrent uploads
@y
  {: #concurrent-uploads }
  ### 並列アップロード
@z

@x
  By default the Docker daemon will push five layers of an image at a time.
  If you are on a low bandwidth connection this may cause timeout issues and you may want to lower
  this via the `--max-concurrent-uploads` daemon option. See the
  [daemon documentation](dockerd.md) for more details.
@y
  Docker デーモンはデフォルトにおいて、イメージのプッシュ時に同時にプッシュするレイヤー数は 5 つまでです。
  低帯域幅の接続を行っている場合には、タイムアウトの原因となることがあります。
  そのような場合にはデーモンオプション`--max-concurrent-downloads`を通じて、その数を減らすことができます。
  詳しくは [デーモンのドキュメント](dockerd.md) を参照してください。
@z

@x
usage: docker push [OPTIONS] NAME[:TAG]
pname: docker
plink: docker.yaml
options:
@y
usage: docker push [オプション] NAME[:TAG]
pname: docker
plink: docker.yaml
options:
@z

@x
- option: all-tags
  shorthand: a
  value_type: bool
  default_value: "false"
  description: Push all tagged images in the repository
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: all-tags
  shorthand: a
  value_type: bool
  default_value: "false"
  description: タグづけされているイメージをすべてリポジトリにプッシュします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: disable-content-trust
  value_type: bool
  default_value: "true"
  description: Skip image signing
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: disable-content-trust
  value_type: bool
  default_value: "true"
  description: イメージの検証を省略します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: quiet
  shorthand: q
  value_type: bool
  default_value: "false"
  description: Suppress verbose output
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: quiet
  shorthand: q
  value_type: bool
  default_value: "false"
  description: 冗長な出力を省略します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
examples: |-
  ### Push a new image to a registry
@y
examples: |-
  {: #push-a-new-image-to-a-registry }
  ### レジストリへのイメージの新規プッシュ
@z

@x
  First save the new image by finding the container ID (using [`docker container ls`](ps.md))
  and then committing it to a new image name.  Note that only `a-z0-9-_.` are
  allowed when naming images:
@y
  新規イメージを保存する際には、まず（[`docker container ls`](ps.md) を利用して）コンテナー ID を確認しておきます。
  そして新たなイメージ名をつけてコミットします。
  イメージ名に利用できる文字は`a-z0-9-_.`のみです。
@z

@x
  ```bash
  $ docker container commit c16378f943fe rhel-httpd:latest
  ```
@y
  ```bash
  $ docker container commit c16378f943fe rhel-httpd:latest
  ```
@z

@x
  Now, push the image to the registry using the image ID. In this example the
  registry is on host named `registry-host` and listening on port `5000`. To do
  this, tag the image with the host name or IP address, and the port of the
  registry:
@y
  そしてイメージ ID を利用してそのイメージをレジストリにプッシュします。
  以下の例ではレジストリが`registry-host`というホスト上にあり、ポート`5000`で待ち受けているものとします。
  以下ではイメージにタグづけを行い、レジストリのホスト名または IP アドレスとポート番号を指定して実行します。
@z

@x
  ```bash
  $ docker image tag rhel-httpd:latest registry-host:5000/myadmin/rhel-httpd:latest

  $ docker image push registry-host:5000/myadmin/rhel-httpd:latest
  ```
@y
  ```bash
  $ docker image tag rhel-httpd:latest registry-host:5000/myadmin/rhel-httpd:latest

  $ docker image push registry-host:5000/myadmin/rhel-httpd:latest
  ```
@z

@x
  Check that this worked by running:
@y
  正常処理されたことを確認するために、以下を実行します。
@z

@x
  ```bash
  $ docker image ls
  ```
@y
  ```bash
  $ docker image ls
  ```
@z

@x
  You should see both `rhel-httpd` and `registry-host:5000/myadmin/rhel-httpd`
  listed.
@y
  出力結果には`rhel-httpd`と`registry-host:5000/myadmin/rhel-httpd`が一覧にあがります。
@z

@x
  ### Push all tags of an image
@y
  {: #push-all-tags-of-an-image }
  ### イメージの全タグのプッシュ
@z

@x
  Use the `-a` (or `--all-tags`) option to push To push all tags of a local image.
@y
  `-a`（または`--all-tags`）オプションを使うと、ローカルイメージに対するすべてのタグをプッシュします。
@z

@x
  The following example creates multiple tags for an image, and pushes all those
  tags to Docker Hub.
@y
  以下の例では 1 つのイメージに対して複数のタグを生成しています。
  そしてそのタグすべてを Docker Hub にプッシュします。
@z

@x
  ```bash
  $ docker image tag myimage registry-host:5000/myname/myimage:latest
  $ docker image tag myimage registry-host:5000/myname/myimage:v1.0.1
  $ docker image tag myimage registry-host:5000/myname/myimage:v1.0
  $ docker image tag myimage registry-host:5000/myname/myimage:v1
  ```
@y
  ```bash
  $ docker image tag myimage registry-host:5000/myname/myimage:latest
  $ docker image tag myimage registry-host:5000/myname/myimage:v1.0.1
  $ docker image tag myimage registry-host:5000/myname/myimage:v1.0
  $ docker image tag myimage registry-host:5000/myname/myimage:v1
  ```
@z

@x
  The image is now tagged under multiple names:
@y
  イメージには複数のタグ名がつけられています。
@z

@x
  ```bash
  $ docker image ls

  REPOSITORY                          TAG        IMAGE ID       CREATED      SIZE
  myimage                             latest     6d5fcfe5ff17   2 hours ago  1.22MB
  registry-host:5000/myname/myimage   latest     6d5fcfe5ff17   2 hours ago  1.22MB
  registry-host:5000/myname/myimage   v1         6d5fcfe5ff17   2 hours ago  1.22MB
  registry-host:5000/myname/myimage   v1.0       6d5fcfe5ff17   2 hours ago  1.22MB
  registry-host:5000/myname/myimage   v1.0.1     6d5fcfe5ff17   2 hours ago  1.22MB
  ```
@y
  ```bash
  $ docker image ls

  REPOSITORY                          TAG        IMAGE ID       CREATED      SIZE
  myimage                             latest     6d5fcfe5ff17   2 hours ago  1.22MB
  registry-host:5000/myname/myimage   latest     6d5fcfe5ff17   2 hours ago  1.22MB
  registry-host:5000/myname/myimage   v1         6d5fcfe5ff17   2 hours ago  1.22MB
  registry-host:5000/myname/myimage   v1.0       6d5fcfe5ff17   2 hours ago  1.22MB
  registry-host:5000/myname/myimage   v1.0.1     6d5fcfe5ff17   2 hours ago  1.22MB
  ```
@z

@x
  When pushing with the `--all-tags` option, all tags of the `registry-host:5000/myname/myimage`
  image are pushed:
@y
  そして`--all-tags`オプションを使ってプッシュを行うと、`registry-host:5000/myname/myimage`イメージのタグがすべてプッシュされます。
@z

@x

  ```bash
  $ docker image push --all-tags registry-host:5000/myname/myimage

  The push refers to repository [registry-host:5000/myname/myimage]
  195be5f8be1d: Pushed
  latest: digest: sha256:edafc0a0fb057813850d1ba44014914ca02d671ae247107ca70c94db686e7de6 size: 4527
  195be5f8be1d: Layer already exists
  v1: digest: sha256:edafc0a0fb057813850d1ba44014914ca02d671ae247107ca70c94db686e7de6 size: 4527
  195be5f8be1d: Layer already exists
  v1.0: digest: sha256:edafc0a0fb057813850d1ba44014914ca02d671ae247107ca70c94db686e7de6 size: 4527
  195be5f8be1d: Layer already exists
  v1.0.1: digest: sha256:edafc0a0fb057813850d1ba44014914ca02d671ae247107ca70c94db686e7de6 size: 4527
  ```
@y
  ```bash
  $ docker image push --all-tags registry-host:5000/myname/myimage

  The push refers to repository [registry-host:5000/myname/myimage]
  195be5f8be1d: Pushed
  latest: digest: sha256:edafc0a0fb057813850d1ba44014914ca02d671ae247107ca70c94db686e7de6 size: 4527
  195be5f8be1d: Layer already exists
  v1: digest: sha256:edafc0a0fb057813850d1ba44014914ca02d671ae247107ca70c94db686e7de6 size: 4527
  195be5f8be1d: Layer already exists
  v1.0: digest: sha256:edafc0a0fb057813850d1ba44014914ca02d671ae247107ca70c94db686e7de6 size: 4527
  195be5f8be1d: Layer already exists
  v1.0.1: digest: sha256:edafc0a0fb057813850d1ba44014914ca02d671ae247107ca70c94db686e7de6 size: 4527
  ```
@z

@x
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@y
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@z
