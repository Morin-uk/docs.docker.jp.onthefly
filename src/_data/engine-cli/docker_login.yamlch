%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
command: docker login
short: Log in to a Docker registry
long: Login to a registry.
usage: docker login [OPTIONS] [SERVER]
pname: docker
plink: docker.yaml
options:
@y
command: docker login
short: Docker Registry にログインします。
long: Docker Registry にログインします。
usage: docker login [オプション] [SERVER]
pname: docker
plink: docker.yaml
options:
@z

@x
- option: password
  shorthand: p
  value_type: string
  description: Password
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: password
  shorthand: p
  value_type: string
  description: パスワード。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: password-stdin
  value_type: bool
  default_value: "false"
  description: Take the password from stdin
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: password-stdin
  value_type: bool
  default_value: "false"
  description: 標準入力からパスワードを指定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: username
  shorthand: u
  value_type: string
  description: Username
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: username
  shorthand: u
  value_type: string
  description: ユーザー名。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
examples: |-
  ### Login to a self-hosted registry
@y
examples: |-
  {: #login-to-a-self-hosted-registry }
  ### Login to a self-hosted registry
@z

@x
  If you want to login to a self-hosted registry you can specify this by
  adding the server name.
@y
  If you want to login to a self-hosted registry you can specify this by
  adding the server name.
@z

@x
  ```bash
  $ docker login localhost:8080
  ```
@y
  ```bash
  $ docker login localhost:8080
  ```
@z

@x
  ### Provide a password using STDIN
@y
  {: #provide-a-password-using-stdin }
  ### STDIN からのパスワード入力
@z

@x
  To run the `docker login` command non-interactively, you can set the
  `--password-stdin` flag to provide a password through `STDIN`. Using
  `STDIN` prevents the password from ending up in the shell's history,
  or log-files.
@y
  To run the `docker login` command non-interactively, you can set the
  `--password-stdin` flag to provide a password through `STDIN`. Using
  `STDIN` prevents the password from ending up in the shell's history,
  or log-files.
@z

@x
  The following example reads a password from a file, and passes it to the
  `docker login` command using `STDIN`:
@y
  The following example reads a password from a file, and passes it to the
  `docker login` command using `STDIN`:
@z

@x
  ```bash
  $ cat ~/my_password.txt | docker login --username foo --password-stdin
  ```
@y
  ```bash
  $ cat ~/my_password.txt | docker login --username foo --password-stdin
  ```
@z

@x
  ### Privileged user requirement
@y
  ### Privileged user requirement
@z

@x
  `docker login` requires user to use `sudo` or be `root`, except when:
@y
  `docker login` requires user to use `sudo` or be `root`, except when:
@z

@x
  1.  connecting to a remote daemon, such as a `docker-machine` provisioned `docker engine`.
@y
  1.  connecting to a remote daemon, such as a `docker-machine` provisioned `docker engine`.
@z

@x
  2.  user is added to the `docker` group.  This will impact the security of your system; the `docker` group is `root` equivalent.  See [Docker Daemon Attack Surface](https://docs.docker.com/engine/security/#docker-daemon-attack-surface) for details.
@y
  2.  user is added to the `docker` group.  This will impact the security of your system; the `docker` group is `root` equivalent.  See [Docker Daemon Attack Surface](https://docs.docker.com/engine/security/#docker-daemon-attack-surface) for details.
@z

@x
  You can log into any public or private repository for which you have
  credentials.  When you log in, the command stores credentials in
  `$HOME/.docker/config.json` on Linux or `%USERPROFILE%/.docker/config.json` on
  Windows, via the procedure described below.
@y
  You can log into any public or private repository for which you have
  credentials.  When you log in, the command stores credentials in
  `$HOME/.docker/config.json` on Linux or `%USERPROFILE%/.docker/config.json` on
  Windows, via the procedure described below.
@z

@x
  ### Credentials store
@y
  ### Credentials store
@z

@x
  The Docker Engine can keep user credentials in an external credentials store,
  such as the native keychain of the operating system. Using an external store
  is more secure than storing credentials in the Docker configuration file.
@y
  The Docker Engine can keep user credentials in an external credentials store,
  such as the native keychain of the operating system. Using an external store
  is more secure than storing credentials in the Docker configuration file.
@z

@x
  To use a credentials store, you need an external helper program to interact
  with a specific keychain or external store. Docker requires the helper
  program to be in the client's host `$PATH`.
@y
  To use a credentials store, you need an external helper program to interact
  with a specific keychain or external store. Docker requires the helper
  program to be in the client's host `$PATH`.
@z

@x
  This is the list of currently available credentials helpers and where
  you can download them from:
@y
  This is the list of currently available credentials helpers and where
  you can download them from:
@z

@x
  - D-Bus Secret Service: https://github.com/docker/docker-credential-helpers/releases
@y
  - D-Bus Secret Service: https://github.com/docker/docker-credential-helpers/releases
@z

@x
  - Apple macOS keychain: https://github.com/docker/docker-credential-helpers/releases
@y
  - Apple macOS keychain: https://github.com/docker/docker-credential-helpers/releases
@z

@x
  - Microsoft Windows Credential Manager: https://github.com/docker/docker-credential-helpers/releases
@y
  - Microsoft Windows Credential Manager: https://github.com/docker/docker-credential-helpers/releases
@z

@x
  - [pass](https://www.passwordstore.org/): https://github.com/docker/docker-credential-helpers/releases
@y
  - [pass](https://www.passwordstore.org/): https://github.com/docker/docker-credential-helpers/releases
@z

@x
  #### Configure the credentials store
@y
  #### Configure the credentials store
@z

@x
  You need to specify the credentials store in `$HOME/.docker/config.json`
  to tell the docker engine to use it. The value of the config property should be
@y
  You need to specify the credentials store in `$HOME/.docker/config.json`
  to tell the docker engine to use it. The value of the config property should be
@z

@x
  the suffix of the program to use (i.e. everything after `docker-credential-`).
@y
  the suffix of the program to use (i.e. everything after `docker-credential-`).
@z

@x
  For example, to use `docker-credential-osxkeychain`:
@y
  For example, to use `docker-credential-osxkeychain`:
@z

@x
  ```json
  {
    "credsStore": "osxkeychain"
  }
  ```
@y
  ```json
  {
    "credsStore": "osxkeychain"
  }
  ```
@z

@x
  If you are currently logged in, run `docker logout` to remove
  the credentials from the file and run `docker login` again.
@y
  If you are currently logged in, run `docker logout` to remove
  the credentials from the file and run `docker login` again.
@z

@x
  #### Default behavior
@y
  #### Default behavior
@z

@x
  By default, Docker looks for the native binary on each of the platforms, i.e.
  "osxkeychain" on macOS, "wincred" on windows, and "pass" on Linux. A special
  case is that on Linux, Docker will fall back to the "secretservice" binary if
  it cannot find the "pass" binary. If none of these binaries are present, it
  stores the credentials (i.e. password) in base64 encoding in the config files
  described above.
@y
  By default, Docker looks for the native binary on each of the platforms, i.e.
  "osxkeychain" on macOS, "wincred" on windows, and "pass" on Linux. A special
  case is that on Linux, Docker will fall back to the "secretservice" binary if
  it cannot find the "pass" binary. If none of these binaries are present, it
  stores the credentials (i.e. password) in base64 encoding in the config files
  described above.
@z

@x
  #### Credential helper protocol
@y
  #### Credential helper protocol
@z

@x
  Credential helpers can be any program or script that follows a very simple protocol.
  This protocol is heavily inspired by Git, but it differs in the information shared.
@y
  Credential helpers can be any program or script that follows a very simple protocol.
  This protocol is heavily inspired by Git, but it differs in the information shared.
@z

@x
  The helpers always use the first argument in the command to identify the action.
  There are only three possible values for that argument: `store`, `get`, and `erase`.
@y
  The helpers always use the first argument in the command to identify the action.
  There are only three possible values for that argument: `store`, `get`, and `erase`.
@z

@x
  The `store` command takes a JSON payload from the standard input. That payload carries
  the server address, to identify the credential, the user name, and either a password
  or an identity token.
@y
  The `store` command takes a JSON payload from the standard input. That payload carries
  the server address, to identify the credential, the user name, and either a password
  or an identity token.
@z

@x
  ```json
  {
    "ServerURL": "https://index.docker.io/v1",
    "Username": "david",
    "Secret": "passw0rd1"
  }
  ```
@y
  ```json
  {
    "ServerURL": "https://index.docker.io/v1",
    "Username": "david",
    "Secret": "passw0rd1"
  }
  ```
@z

@x
  If the secret being stored is an identity token, the Username should be set to
  `<token>`.
@y
  If the secret being stored is an identity token, the Username should be set to
  `<token>`.
@z

@x
  The `store` command can write error messages to `STDOUT` that the docker engine
  will show if there was an issue.
@y
  The `store` command can write error messages to `STDOUT` that the docker engine
  will show if there was an issue.
@z

@x
  The `get` command takes a string payload from the standard input. That payload carries
  the server address that the docker engine needs credentials for. This is
  an example of that payload: `https://index.docker.io/v1`.
@y
  The `get` command takes a string payload from the standard input. That payload carries
  the server address that the docker engine needs credentials for. This is
  an example of that payload: `https://index.docker.io/v1`.
@z

@x
  The `get` command writes a JSON payload to `STDOUT`. Docker reads the user name
  and password from this payload:
@y
  The `get` command writes a JSON payload to `STDOUT`. Docker reads the user name
  and password from this payload:
@z

@x
  ```json
  {
    "Username": "david",
    "Secret": "passw0rd1"
  }
  ```
@y
  ```json
  {
    "Username": "david",
    "Secret": "passw0rd1"
  }
  ```
@z

@x
  The `erase` command takes a string payload from `STDIN`. That payload carries
  the server address that the docker engine wants to remove credentials for. This is
  an example of that payload: `https://index.docker.io/v1`.
@y
  The `erase` command takes a string payload from `STDIN`. That payload carries
  the server address that the docker engine wants to remove credentials for. This is
  an example of that payload: `https://index.docker.io/v1`.
@z

@x
  The `erase` command can write error messages to `STDOUT` that the docker engine
  will show if there was an issue.
@y
  The `erase` command can write error messages to `STDOUT` that the docker engine
  will show if there was an issue.
@z

@x
  ### Credential helpers
@y
  ### Credential helpers
@z

@x
  Credential helpers are similar to the credential store above, but act as the
  designated programs to handle credentials for *specific registries*. The default
  credential store (`credsStore` or the config file itself) will not be used for
  operations concerning credentials of the specified registries.
@y
  Credential helpers are similar to the credential store above, but act as the
  designated programs to handle credentials for *specific registries*. The default
  credential store (`credsStore` or the config file itself) will not be used for
  operations concerning credentials of the specified registries.
@z

@x
  #### Configure credential helpers
@y
  #### Configure credential helpers
@z

@x
  If you are currently logged in, run `docker logout` to remove
  the credentials from the default store.
@y
  If you are currently logged in, run `docker logout` to remove
  the credentials from the default store.
@z

@x
  Credential helpers are specified in a similar way to `credsStore`, but
  allow for multiple helpers to be configured at a time. Keys specify the
  registry domain, and values specify the suffix of the program to use
@y
  Credential helpers are specified in a similar way to `credsStore`, but
  allow for multiple helpers to be configured at a time. Keys specify the
  registry domain, and values specify the suffix of the program to use
@z

@x
  (i.e. everything after `docker-credential-`).
  For example:
@y
  (i.e. everything after `docker-credential-`).
  For example:
@z

@x
  ```json
  {
    "credHelpers": {
      "registry.example.com": "registryhelper",
@y
  ```json
  {
    "credHelpers": {
      "registry.example.com": "registryhelper",
@z

@x
      "awesomereg.example.org": "hip-star",
      "unicorn.example.io": "vcbait"
    }
  }
  ```
@y
      "awesomereg.example.org": "hip-star",
      "unicorn.example.io": "vcbait"
    }
  }
  ```
@z

@x
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@y
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@z
