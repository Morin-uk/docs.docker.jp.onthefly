%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
command: docker login
short: Log in to a Docker registry
long: Login to a registry.
usage: docker login [OPTIONS] [SERVER]
pname: docker
plink: docker.yaml
options:
@y
command: docker login
short: Docker Registry にログインします。
long: Docker Registry にログインします。
usage: docker login [オプション] [SERVER]
pname: docker
plink: docker.yaml
options:
@z

@x
- option: password
  shorthand: p
  value_type: string
  description: Password
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: password
  shorthand: p
  value_type: string
  description: パスワード。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: password-stdin
  value_type: bool
  default_value: "false"
  description: Take the password from stdin
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: password-stdin
  value_type: bool
  default_value: "false"
  description: 標準入力からパスワードを指定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: username
  shorthand: u
  value_type: string
  description: Username
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: username
  shorthand: u
  value_type: string
  description: ユーザー名。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
examples: |-
  ### Login to a self-hosted registry
@y
examples: |-
  {: #login-to-a-self-hosted-registry }
  ### 独自レジストリへのログイン
@z

@x
  If you want to login to a self-hosted registry you can specify this by
  adding the server name.
@y
  独自にホスティングしているレジストリにログインする場合は、サーバー名を指定します。
@z

@x
  ```bash
  $ docker login localhost:8080
  ```
@y
  ```bash
  $ docker login localhost:8080
  ```
@z

@x
  ### Provide a password using STDIN
@y
  {: #provide-a-password-using-stdin }
  ### STDIN からのパスワード入力
@z

@x
  To run the `docker login` command non-interactively, you can set the
  `--password-stdin` flag to provide a password through `STDIN`. Using
  `STDIN` prevents the password from ending up in the shell's history,
  or log-files.
@y
  `docker login`コマンドを非対話的に実行する場合には`--password-stdin`フラグを使って`STDIN`からパスワードを入力するようにします。
   `STDIN`を利用すれば、パスワードがシェル履歴やログファイルに残る心配がありません。
@z

@x
  The following example reads a password from a file, and passes it to the
  `docker login` command using `STDIN`:
@y
  以下の例はパスワードをファイルから読み込んで、これを`STDIN`経由で`docker login`コマンドに受け渡します。
@z

@x
  ```bash
  $ cat ~/my_password.txt | docker login --username foo --password-stdin
  ```
@y
  ```bash
  $ cat ~/my_password.txt | docker login --username foo --password-stdin
  ```
@z

@x
  ### Privileged user requirement
@y
  {: #privileged-user-requirement }
  ### 特権ユーザー
@z

@x
  `docker login` requires user to use `sudo` or be `root`, except when:
@y
  `docker login`は`sudo`とともに実行するか、あるいは`root`になることが必要です。
  ただし以下のような例外もあります。
@z

@x
  1.  connecting to a remote daemon, such as a `docker-machine` provisioned `docker engine`.
@y
  1.  リモートデーモン、たとえば`docker-machine`によって実現された`docker engine`に接続する場合。
@z

@x
  2.  user is added to the `docker` group.  This will impact the security of your system; the `docker` group is `root` equivalent.  See [Docker Daemon Attack Surface](https://docs.docker.com/engine/security/#docker-daemon-attack-surface) for details.
@y
  2.  `docker`グループに所属するユーザーを用いた場合。
      ただしこれはシステムセキュリティ上、重大な影響を及ぼします。
      というのも`docker`グループは`root`に等しいからです。
      詳しくは [Docker デーモンの攻撃領域]({{ site.baseurl }}/engine/security/#docker-daemon-attack-surface) を参照してください。
@z

@x
  You can log into any public or private repository for which you have
  credentials.  When you log in, the command stores credentials in
  `$HOME/.docker/config.json` on Linux or `%USERPROFILE%/.docker/config.json` on
  Windows, via the procedure described below.
@y
  資格情報を有していれば、どのような公開またはプライベートリポジトリであってもログインできます。
  ログインすることによって、資格情報は Linux の場合は`$HOME/.docker/config.json`に、Windows の場合は`%USERPROFILE%/.docker/config.json`に保存されます。
  その際の処理手順は以降に示しています。
@z

@x
  ### Credentials store
@y
  {: #credentials-store }
  ### 資格情報ストア
@z

@x
  The Docker Engine can keep user credentials in an external credentials store,
  such as the native keychain of the operating system. Using an external store
  is more secure than storing credentials in the Docker configuration file.
@y
  Docker Engine においてユーザーの資格情報は、オペレーティングシステムのネイティブなキーチェーンのように、外部の資格情報ストア（credentials store）に保存することができます。
  資格情報ストアを利用すれば、Docker 設定ファイル内に資格情報を保存することに比べれば、はるかに安全です。
@z

@x
  To use a credentials store, you need an external helper program to interact
  with a specific keychain or external store. Docker requires the helper
  program to be in the client's host `$PATH`.
@y
  資格情報ストアを利用するには、所定のキーチェーンや外部ストアとのやりとりを行うための外部ヘルパープログラムを必要とします。
  Docker ではそのヘルパープログラムを、クライアントホストの`$PATH`に置きます。
@z

@x
  This is the list of currently available credentials helpers and where
  you can download them from:
@y
  以下の一覧は、現時点において利用可能な資格情報ヘルパープログラムとそのダウンロード先を示すものです。
@z

@x
  - D-Bus Secret Service: https://github.com/docker/docker-credential-helpers/releases
@y
  - D-Bus Secret Service: https://github.com/docker/docker-credential-helpers/releases
@z

@x
  - Apple macOS keychain: https://github.com/docker/docker-credential-helpers/releases
@y
  - Apple macOS キーチェーン: https://github.com/docker/docker-credential-helpers/releases
@z

@x
  - Microsoft Windows Credential Manager: https://github.com/docker/docker-credential-helpers/releases
@y
  - Microsoft Windows Credential Manager: https://github.com/docker/docker-credential-helpers/releases
@z

@x
  - [pass](https://www.passwordstore.org/): https://github.com/docker/docker-credential-helpers/releases
@y
  - [pass](https://www.passwordstore.org/): https://github.com/docker/docker-credential-helpers/releases
@z

@x、
  #### Configure the credentials store
@y
  {: #configure-the-credentials-store }
  #### 資格情報ストアの設定
@z

@x
  You need to specify the credentials store in `$HOME/.docker/config.json`
  to tell the docker engine to use it. The value of the config property should be
  the suffix of the program to use (i.e. everything after `docker-credential-`).
@y
  資格情報ストアの設定は`$HOME/.docker/config.json`において行い、docker engine がこれを利用するようにします。
  設定プロパティの値には、利用するプログラム名をサフィックスにつけることが必要です。
  （つまり`docker-credential-`の後ろにつけます。）
@z

@x
  For example, to use `docker-credential-osxkeychain`:
@y
  たとえば`docker-credential-osxkeychain`を用いるには以下のようにします。
@z

@x
  ```json
  {
    "credsStore": "osxkeychain"
  }
  ```
@y
  ```json
  {
    "credsStore": "osxkeychain"
  }
  ```
@z

@x
  If you are currently logged in, run `docker logout` to remove
  the credentials from the file and run `docker login` again.
@y
  現時点においてログインしているなら、資格情報をファイルから削除するためにいったんログアウトし、`docker login`により再度ログインします。
@z

@x
  #### Default behavior
@y
  {: #default-behavior }
  #### デフォルト動作
@z

@x
  By default, Docker looks for the native binary on each of the platforms, i.e.
  "osxkeychain" on macOS, "wincred" on windows, and "pass" on Linux. A special
  case is that on Linux, Docker will fall back to the "secretservice" binary if
  it cannot find the "pass" binary. If none of these binaries are present, it
  stores the credentials (i.e. password) in base64 encoding in the config files
  described above.
@y
  デフォルトにおいて Docker は、それぞれのプラットフォームにおけるネイティブな実行バイナリを利用します。
  つまり macOS であれば「osxkeychain」、Windows なら「wincred」、Linux なら「pass」です。
  特別な例として Linux においては「pass」バイナリが見つからなかった場合、「secretservice」バイナリが用いられます。
  そしていずれのバイナリも存在しなかった場合は、上で説明したように資格情報（パスワードなど）は base64 エンコーディングによって設定ファイルに保存されます。
@z

@x
  #### Credential helper protocol
@y
  {: #credential-helper-protocol }
  #### 資格情報ヘルパーのプロトコル
@z

@x
  Credential helpers can be any program or script that follows a very simple protocol.
  This protocol is heavily inspired by Git, but it differs in the information shared.
@y
  資格情報ヘルパー（credential helpers）は、非常にシンプルなプロトコルに基づいたプログラムまたはスクリプトです。
  このプロトコルは Git に大きく影響を受けていますが、ただし情報を共有する方法に違いがあります。
@z

@x
  The helpers always use the first argument in the command to identify the action.
  There are only three possible values for that argument: `store`, `get`, and `erase`.
@y
  ヘルパープログラムのコマンドでは、第一引数が必ずアクションを表わします。
  そして取り得る値は`store`、`get`、`erase`の 3 つに限られます。
@z

@x
  The `store` command takes a JSON payload from the standard input. That payload carries
  the server address, to identify the credential, the user name, and either a password
  or an identity token.
@y
  コマンド`store`は、標準入力から JSON データ本体を受けつけます。
  このデータからサーバーアドレスを送信して、資格情報、ユーザー名、そしてパスワードかアイデンティティトークンのいずれかを識別します。
@z

@x
  ```json
  {
    "ServerURL": "https://index.docker.io/v1",
    "Username": "david",
    "Secret": "passw0rd1"
  }
  ```
@y
  ```json
  {
    "ServerURL": "https://index.docker.io/v1",
    "Username": "david",
    "Secret": "passw0rd1"
  }
  ```
@z

@x
  If the secret being stored is an identity token, the Username should be set to
  `<token>`.
@y
  保持されている機密情報がアイデンティティトークンである場合、Username には`<token>`を設定する必要があります。
@z

@x
  The `store` command can write error messages to `STDOUT` that the docker engine
  will show if there was an issue.
@y
  `store`コマンドでは docker engine に問題が発生した場合には`STDOUT`にエラーメッセージ出力を行います。
@z

@x
  The `get` command takes a string payload from the standard input. That payload carries
  the server address that the docker engine needs credentials for. This is
  an example of that payload: `https://index.docker.io/v1`.
@y
  `get`コマンドは標準入力から文字列情報を取得します。
  このデータから、docker engine が資格情報を削除したいサーバーアドレスを送信します。
  以下は`https://index.docker.io/v1`に向けた JSON データ本体の例です。
@z

@x
  The `get` command writes a JSON payload to `STDOUT`. Docker reads the user name
  and password from this payload:
@y
  `get`コマンドは JSON データ本体を`STDOUT`に出力します。
  Docker はこのデータからユーザー名とパスワードを読み込みます。
@z

@x
  ```json
  {
    "Username": "david",
    "Secret": "passw0rd1"
  }
  ```
@y
  ```json
  {
    "Username": "david",
    "Secret": "passw0rd1"
  }
  ```
@z

@x
  The `erase` command takes a string payload from `STDIN`. That payload carries
  the server address that the docker engine wants to remove credentials for. This is
  an example of that payload: `https://index.docker.io/v1`.
@y
  `erase`コマンドは`STDIN`から文字列情報を取得します。
  このデータから、docker engine が資格情報を削除したいサーバーアドレスを送信します。
  以下は`https://index.docker.io/v1`に向けた JSON データ本体の例です。
@z

@x
  The `erase` command can write error messages to `STDOUT` that the docker engine
  will show if there was an issue.
@y
  `erase`コマンドでは docker engine に問題が発生した場合には`STDOUT`にエラーメッセージ出力を行います。
@z

@x
  ### Credential helpers
@y
  {: #credential-helpers }
  ### 資格情報ヘルパー
@z

@x
  Credential helpers are similar to the credential store above, but act as the
  designated programs to handle credentials for *specific registries*. The default
  credential store (`credsStore` or the config file itself) will not be used for
  operations concerning credentials of the specified registries.
@y
  資格情報ヘルパー（credential helpers）は、前述の資格情報ストアに似ています。
  ただし異なる点は、**特定のレジストリ** において資格情報を取り扱うように設計されたプログラムであるということです。
  デフォルトの資格情報ストア（`credsStore`または設定ファイルそのもの）は、その特定のレジストリに対しての資格情報処理においては利用されません。
@z

@x
  #### Configure credential helpers
@y
  {: #configure-credential-helpers }
  #### 資格情報ヘルパーの設定
@z

@x
  If you are currently logged in, run `docker logout` to remove
  the credentials from the default store.
@y
  すでにログインしている場合は、`docker logout`を実行し、デフォルトの資格情報ストアから資格情報を削除しておきます。
@z

@x
  Credential helpers are specified in a similar way to `credsStore`, but
  allow for multiple helpers to be configured at a time. Keys specify the
  registry domain, and values specify the suffix of the program to use
  (i.e. everything after `docker-credential-`).
  For example:
@y
  資格情報ヘルパーの指定は`credsStore`の指定と同様に行います。
  ただし一度に複数のヘルパーを設定することができます。
  キーによってレジストリドメインを指定し、値によって利用するプログラムのサフィックス（つまり`docker-credential-`の後ろに続くもの）を指定します。
  たとえば以下のとおりです。
@z

@x
  ```json
  {
    "credHelpers": {
      "registry.example.com": "registryhelper",
      "awesomereg.example.org": "hip-star",
      "unicorn.example.io": "vcbait"
    }
  }
  ```
@y
  ```json
  {
    "credHelpers": {
      "registry.example.com": "registryhelper",
      "awesomereg.example.org": "hip-star",
      "unicorn.example.io": "vcbait"
    }
  }
  ```
@z

@x
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@y
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@z
