%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
command: docker version
short: Show the Docker version information
@y
command: docker version
short: Docker のバージョン情報を表示します。
@z

@x
long: |-
  By default, this will render all version information in an easy to read
  layout. If a format is specified, the given template will be executed instead.
@y
long: |-
  デフォルトで本コマンドは、バージョン情報をわかりやすいレイアウトによりすべて表示します。
  出力フォーマットが指定されたときには、そのテンプレートが利用されます。
@z

@x
  Go's [text/template](http://golang.org/pkg/text/template/) package
  describes all the details of the format.
@y
  Go 言語の [text/template](http://golang.org/pkg/text/template/) パッケージに、そのフォーマットに関する詳細が説明されています。
@z

@x
usage: docker version [OPTIONS]
pname: docker
plink: docker.yaml
options:
@y
usage: docker version [オプション]
pname: docker
plink: docker.yaml
options:
@z

@x
- option: format
  shorthand: f
  value_type: string
  description: Format the output using the given Go template
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: format
  shorthand: f
  value_type: string
  description: Go 言語テンプレートを使って出力をフォーマットします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: kubeconfig
  value_type: string
  description: Kubernetes config file
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: true
  swarm: false
@y
- option: kubeconfig
  value_type: string
  description: Kubernetes 設定ファイル。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: true
  swarm: false
@z

@x
examples: |-
  ### Default output
@y
examples: |-
  {: #default-output }
  ### デフォルト出力
@z

@x
  ```bash
  $ docker version
@y
  ```bash
  $ docker version
@z

@x
  Client:
   Version:           19.03.8
   API version:       1.40
   Go version:        go1.12.17
   Git commit:        afacb8b
   Built:             Wed Mar 11 01:21:11 2020
   OS/Arch:           darwin/amd64
   Context:           default
   Experimental:      true
@y
  Client:
   Version:           19.03.8
   API version:       1.40
   Go version:        go1.12.17
   Git commit:        afacb8b
   Built:             Wed Mar 11 01:21:11 2020
   OS/Arch:           darwin/amd64
   Context:           default
   Experimental:      true
@z

@x
  Server:
   Engine:
    Version:          19.03.8
    API version:      1.40 (minimum version 1.12)
    Go version:       go1.12.17
    Git commit:       afacb8b
    Built:            Wed Mar 11 01:29:16 2020
    OS/Arch:          linux/amd64
    Experimental:     true
   containerd:
    Version:          v1.2.13
    GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429
   runc:
    Version:          1.0.0-rc10
    GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd
   docker-init:
    Version:          0.18.0
    GitCommit:        fec3683
  ```
@y
  Server:
   Engine:
    Version:          19.03.8
    API version:      1.40 (minimum version 1.12)
    Go version:       go1.12.17
    Git commit:       afacb8b
    Built:            Wed Mar 11 01:29:16 2020
    OS/Arch:          linux/amd64
    Experimental:     true
   containerd:
    Version:          v1.2.13
    GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429
   runc:
    Version:          1.0.0-rc10
    GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd
   docker-init:
    Version:          0.18.0
    GitCommit:        fec3683
  ```
@z

@x
  ### Get the server version
@y
  {: #get-the-server-version }
  ### サーバーバージョンの取得
@z

@x
  ```bash
  $ docker version --format '{{.Server.Version}}'

  19.03.8
  ```
@y
  ```bash
  $ docker version --format '{{.Server.Version}}'

  19.03.8
  ```
@z

@x
  ### Dump raw JSON data
@y
  {: #dump-raw-json-data }
  ### JSON データのダンプ出力
@z

@x
  ```bash
  $ docker version --format '{{json .}}'

  {"Client":{"Platform":{"Name":"Docker Engine - Community"},"Version":"19.03.8","ApiVersion":"1.40","DefaultAPIVersion":"1.40","GitCommit":"afacb8b","GoVersion":"go1.12.17","Os":"darwin","Arch":"amd64","BuildTime":"Wed Mar 11 01:21:11 2020","Experimental":true},"Server":{"Platform":{"Name":"Docker Engine - Community"},"Components":[{"Name":"Engine","Version":"19.03.8","Details":{"ApiVersion":"1.40","Arch":"amd64","BuildTime":"Wed Mar 11 01:29:16 2020","Experimental":"true","GitCommit":"afacb8b","GoVersion":"go1.12.17","KernelVersion":"4.19.76-linuxkit","MinAPIVersion":"1.12","Os":"linux"}},{"Name":"containerd","Version":"v1.2.13","Details":{"GitCommit":"7ad184331fa3e55e52b890ea95e65ba581ae3429"}},{"Name":"runc","Version":"1.0.0-rc10","Details":{"GitCommit":"dc9208a3303feef5b3839f4323d9beb36df0a9dd"}},{"Name":"docker-init","Version":"0.18.0","Details":{"GitCommit":"fec3683"}}],"Version":"19.03.8","ApiVersion":"1.40","MinAPIVersion":"1.12","GitCommit":"afacb8b","GoVersion":"go1.12.17","Os":"linux","Arch":"amd64","KernelVersion":"4.19.76-linuxkit","Experimental":true,"BuildTime":"2020-03-11T01:29:16.000000000+00:00"}}
  ```
@y
  ```bash
  $ docker version --format '{{json .}}'

  {"Client":{"Platform":{"Name":"Docker Engine - Community"},"Version":"19.03.8","ApiVersion":"1.40","DefaultAPIVersion":"1.40","GitCommit":"afacb8b","GoVersion":"go1.12.17","Os":"darwin","Arch":"amd64","BuildTime":"Wed Mar 11 01:21:11 2020","Experimental":true},"Server":{"Platform":{"Name":"Docker Engine - Community"},"Components":[{"Name":"Engine","Version":"19.03.8","Details":{"ApiVersion":"1.40","Arch":"amd64","BuildTime":"Wed Mar 11 01:29:16 2020","Experimental":"true","GitCommit":"afacb8b","GoVersion":"go1.12.17","KernelVersion":"4.19.76-linuxkit","MinAPIVersion":"1.12","Os":"linux"}},{"Name":"containerd","Version":"v1.2.13","Details":{"GitCommit":"7ad184331fa3e55e52b890ea95e65ba581ae3429"}},{"Name":"runc","Version":"1.0.0-rc10","Details":{"GitCommit":"dc9208a3303feef5b3839f4323d9beb36df0a9dd"}},{"Name":"docker-init","Version":"0.18.0","Details":{"GitCommit":"fec3683"}}],"Version":"19.03.8","ApiVersion":"1.40","MinAPIVersion":"1.12","GitCommit":"afacb8b","GoVersion":"go1.12.17","Os":"linux","Arch":"amd64","KernelVersion":"4.19.76-linuxkit","Experimental":true,"BuildTime":"2020-03-11T01:29:16.000000000+00:00"}}
  ```
@z

@x
  ### Print the current context
@y
  {: #print-the-current-context }
  ### カレントなコンテキストの表示
@z

@x
  The following example prints the currently used [`docker context`](context.md):
@y
  以下の例では、現時点において利用されている [`docker context`](context.md) を表示します。
@z

@x
  ```bash
  $ docker version --format='{{.Client.Context}}'
  default
  ```
@y
  ```bash
  $ docker version --format='{{.Client.Context}}'
  default
  ```
@z

@x
  As an example, this output can be used to dynamically change your shell prompt
  to indicate your active context. The example below illustrates how this output
  could be used when using Bash as your shell.
@y
  1 つの例として上の出力結果は、利用するシェルプロンプトにおいて、アクティブなコンテキストを動的に設定するために利用することができます。
  下に示すのは、シェルが Bash である場合に上の出力を利用する例です。
@z

@x
  Declare a function to obtain the current context in your `~/.bashrc`, and set
  this command as your `PROMPT_COMMAND`
@y
  `~/.bashrc`ファイル内において、カレントなコンテキストを取得する関数を宣言し、このコマンドを`PROMPT_COMMAND`として設定しています。
@z

@x
  ```bash
  function docker_context_prompt() {
          PS1="context: $(docker version --format='{{.Client.Context}}')> "
  }

  PROMPT_COMMAND=docker_context_prompt
  ```
@y
  ```bash
  function docker_context_prompt() {
          PS1="context: $(docker version --format='{{.Client.Context}}')> "
  }

  PROMPT_COMMAND=docker_context_prompt
  ```
@z

@x
  After reloading the `~/.bashrc`, the prompt now shows the currently selected
  `docker context`:
@y
  `~/.bashrc`を再読み込みすれば、プロンプト表示にカレントな`docker context`が表示されます。
@z

@x
  ```bash
  $ source ~/.bashrc
  context: default> docker context create --docker host=unix:///var/run/docker.sock my-context
  my-context
  Successfully created context "my-context"
  context: default> docker context use my-context
  my-context
  Current context is now "my-context"
  context: my-context> docker context use default
  default
  Current context is now "default"
  context: default>
  ```
@y
  ```bash
  $ source ~/.bashrc
  context: default> docker context create --docker host=unix:///var/run/docker.sock my-context
  my-context
  Successfully created context "my-context"
  context: default> docker context use my-context
  my-context
  Current context is now "my-context"
  context: my-context> docker context use default
  default
  Current context is now "default"
  context: default>
  ```
@z

@x
  Refer to the [`docker context` section](context.md) in the command line reference
  for more information about `docker context`.
@y
  `docker context`に関する詳細は、コマンドラインリファレンス内の [`docker context`の節](context.md) を参照してください。
@z

@x
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@y
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@z
