%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
command: docker system events
short: Get real time events from the server
@y
command: docker system events
short: Get real time events from the server
@z

@x
long: |-
@y
long: |-
@z

@x
  Use `docker system events` to get real-time events from the server. These
  events differ per Docker object type.
@y
  Use `docker system events` to get real-time events from the server. These
  events differ per Docker object type.
@z

@x
  ### Object types
@y
  ### Object types
@z

@x
  #### Containers
@y
  #### Containers
@z

@x
  Docker containers report the following events:
@y
  Docker containers report the following events:
@z

@x
  - `attach`
@y
  - `attach`
@z

@x
  - `commit`
@y
  - `commit`
@z

@x
  - `copy`
@y
  - `copy`
@z

@x
  - `create`
@y
  - `create`
@z

@x
  - `destroy`
@y
  - `destroy`
@z

@x
  - `detach`
@y
  - `detach`
@z

@x
  - `die`
@y
  - `die`
@z

@x
  - `exec_create`
@y
  - `exec_create`
@z

@x
  - `exec_detach`
@y
  - `exec_detach`
@z

@x
  - `exec_start`
@y
  - `exec_start`
@z

@x
  - `export`
@y
  - `export`
@z

@x
  - `health_status`
@y
  - `health_status`
@z

@x
  - `kill`
@y
  - `kill`
@z

@x
  - `oom`
@y
  - `oom`
@z

@x
  - `pause`
@y
  - `pause`
@z

@x
  - `rename`
@y
  - `rename`
@z

@x
  - `resize`
@y
  - `resize`
@z

@x
  - `restart`
@y
  - `restart`
@z

@x
  - `start`
@y
  - `start`
@z

@x
  - `stop`
@y
  - `stop`
@z

@x
  - `top`
@y
  - `top`
@z

@x
  - `unpause`
@y
  - `unpause`
@z

@x
  - `update`
@y
  - `update`
@z

@x
  #### Images
@y
  #### Images
@z

@x
  Docker images report the following events:
@y
  Docker images report the following events:
@z

@x
  - `delete`
@y
  - `delete`
@z

@x
  - `import`
@y
  - `import`
@z

@x
  - `load`
@y
  - `load`
@z

@x
  - `pull`
@y
  - `pull`
@z

@x
  - `push`
@y
  - `push`
@z

@x
  - `save`
@y
  - `save`
@z

@x
  - `tag`
@y
  - `tag`
@z

@x
  - `untag`
@y
  - `untag`
@z

@x
  #### Plugins
@y
  #### Plugins
@z

@x
  Docker plugins report the following events:
@y
  Docker plugins report the following events:
@z

@x
  - `install`
@y
  - `install`
@z

@x
  - `enable`
@y
  - `enable`
@z

@x
  - `disable`
@y
  - `disable`
@z

@x
  - `remove`
@y
  - `remove`
@z

@x
  #### Volumes
@y
  #### Volumes
@z

@x
  Docker volumes report the following events:
@y
  Docker volumes report the following events:
@z

@x
  - `create`
@y
  - `create`
@z

@x
  - `mount`
@y
  - `mount`
@z

@x
  - `unmount`
@y
  - `unmount`
@z

@x
  - `destroy`
@y
  - `destroy`
@z

@x
  #### Networks
@y
  #### Networks
@z

@x
  Docker networks report the following events:
@y
  Docker networks report the following events:
@z

@x
  - `create`
@y
  - `create`
@z

@x
  - `connect`
@y
  - `connect`
@z

@x
  - `disconnect`
@y
  - `disconnect`
@z

@x
  - `destroy`
@y
  - `destroy`
@z

@x
  #### Daemons
@y
  #### Daemons
@z

@x
  Docker daemons report the following events:
@y
  Docker daemons report the following events:
@z

@x
  - `reload`
@y
  - `reload`
@z

@x
  ### Limiting, filtering, and formatting the output
@y
  ### Limiting, filtering, and formatting the output
@z

@x
  #### Limit events by time
@y
  #### Limit events by time
@z

@x
  The `--since` and `--until` parameters can be Unix timestamps, date formatted
  timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed
@y
  The `--since` and `--until` parameters can be Unix timestamps, date formatted
  timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed
@z

@x
  relative to the client machine’s time. If you do not provide the `--since` option,
  the command returns only new and/or live events.  Supported formats for date
@y
  relative to the client machine’s time. If you do not provide the `--since` option,
  the command returns only new and/or live events.  Supported formats for date
@z

@x
  formatted time stamps include RFC3339Nano, RFC3339, `2006-01-02T15:04:05`,
@y
  formatted time stamps include RFC3339Nano, RFC3339, `2006-01-02T15:04:05`,
@z

@x
  `2006-01-02T15:04:05.999999999`, `2006-01-02Z07:00`, and `2006-01-02`. The local
  timezone on the client will be used if you do not provide either a `Z` or a
@y
  `2006-01-02T15:04:05.999999999`, `2006-01-02Z07:00`, and `2006-01-02`. The local
  timezone on the client will be used if you do not provide either a `Z` or a
@z

@x
  `+-00:00` timezone offset at the end of the timestamp.  When providing Unix
  timestamps enter seconds[.nanoseconds], where seconds is the number of seconds
  that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap
  seconds (aka Unix epoch or Unix time), and the optional .nanoseconds field is a
  fraction of a second no more than nine digits long.
@y
  `+-00:00` timezone offset at the end of the timestamp.  When providing Unix
  timestamps enter seconds[.nanoseconds], where seconds is the number of seconds
  that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap
  seconds (aka Unix epoch or Unix time), and the optional .nanoseconds field is a
  fraction of a second no more than nine digits long.
@z

@x
  #### Filtering
@y
  {: #filtering }
  ### フィルター検索
@z

@x
  The filtering flag (`-f` or `--filter`) format is of "key=value". If you would
  like to use multiple filters, pass multiple flags (e.g.,
  `--filter "foo=bar" --filter "bif=baz"`)
@y
  フィルターフラグ（`-f` または `--filter`）の指定書式は「キー=値」というものです。
  複数のフィルターが必要な場合は、フラグを複数指定します。
  （たとえば `--filter "foo=bar" --filter "bif=baz"` など。）
@z

@x
  Using the same filter multiple times will be handled as a *OR*; for example
  `--filter container=588a23dac085 --filter container=a8f7720b8c22` will display
  events for container 588a23dac085 *OR* container a8f7720b8c22
@y
  同一のフィルターフラグを複数回指定した場合は、**OR** フィルターとして結合されます。
  たとえば `--filter container=588a23dac085 --filter container=a8f7720b8c22` は、コンテナー 588a23dac085 **または** a8f7720b8c22 に対するイベントを表示します。
@z

@x
  Using multiple filters will be handled as a *AND*; for example
  `--filter container=588a23dac085 --filter event=start` will display events for
  container container 588a23dac085 *AND* the event type is *start*
@y
  異なるフィルターフラグを複数指定した場合は、**AND** フィルターとして結合されます。
  たとえば `--filter container=588a23dac085 --filter event=start` は コンテナー 588a23dac085 であり、**かつ** イベントタイプが **start** であるものが表示されます。
@z

@x
  The currently supported filters are:
@y
  現在サポートされているフィルターは以下のとおりです。
@z

@x
  * container (`container=<name or id>`)
  * daemon (`daemon=<name or id>`)
  * event (`event=<event action>`)
  * image (`image=<tag or id>`)
  * label (`label=<key>` or `label=<key>=<value>`)
  * network (`network=<name or id>`)
  * plugin (`plugin=<name or id>`)
  * type (`type=<container or image or volume or network or daemon or plugin>`)
  * volume (`volume=<name or id>`)
@y
  * container (`container=<name or id>`)
  * daemon (`daemon=<name or id>`)
  * event (`event=<event action>`)
  * image (`image=<tag or id>`)
  * label (`label=<key>` or `label=<key>=<value>`)
  * network (`network=<name or id>`)
  * plugin (`plugin=<name or id>`)
  * type (`type=<container or image or volume or network or daemon or plugin>`)
  * volume (`volume=<name or id>`)
@z

@x
  #### Format
@y
  {: #format }
  #### フォーマット設定
@z

@x
  If a format (`--format`) is specified, the given template will be executed
  instead of the default
  format. Go's [text/template](http://golang.org/pkg/text/template/) package
  describes all the details of the format.
@y
  If a format (`--format`) is specified, the given template will be executed
  instead of the default
  format. Go's [text/template](http://golang.org/pkg/text/template/) package
  describes all the details of the format.
@z

@x
  If a format is set to `{{json .}}`, the events are streamed as valid JSON
  Lines. For information about JSON Lines, please refer to http://jsonlines.org/ .
@y
  If a format is set to `{{json .}}`, the events are streamed as valid JSON
  Lines. For information about JSON Lines, please refer to http://jsonlines.org/ .
@z

@x
usage: docker system events [OPTIONS]
pname: docker system
plink: docker_system.yaml
options:
@y
usage: docker system events [オプション]
pname: docker system
plink: docker_system.yaml
options:
@z

@x
- option: filter
  shorthand: f
  value_type: filter
  description: Filter output based on conditions provided
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: filter
  shorthand: f
  value_type: filter
  description: 指定された条件に基づいてフィルター検索を行います。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: format
  value_type: string
  description: Format the output using the given Go template
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: format
  value_type: string
  description: Go 言語テンプレートを使って出力をフォーマットします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: since
  value_type: string
  description: Show all events created since timestamp
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: since
  value_type: string
  description: タイムスタンプ以降に生成されたイベントをすべて表示します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: until
  value_type: string
  description: Stream events until this timestamp
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: until
  value_type: string
  description: そのタイムスタンプ以前のイベントを出力します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
examples: |-
  ### Basic example
@y
examples: |-
  {: #basic-example }
  ### 基本的な利用例
@z

@x
  You'll need two shells for this example.
@y
  以下の利用例においてはシェルを 2 つ利用します。
@z

@x
  **Shell 1: Listening for events:**
@y
  **シェル 1: イベントの取得**
@z

@x
  ```bash
  $ docker system events
  ```
@y
  ```bash
  $ docker system events
  ```
@z

@x
  **Shell 2: Start and Stop containers:**
@y
  **シェル 2: コンテナーの起動と停止**
@z

@x
  ```bash
  $ docker create --name test alpine:latest top
  $ docker start test
  $ docker stop test
  ```
@y
  ```bash
  $ docker create --name test alpine:latest top
  $ docker start test
  $ docker stop test
  ```
@z

@x
  **Shell 1: (Again .. now showing events):**
@y
  **シェル 1: (再度確認。イベントが表示される。)**
@z

@x
  ```console
@y
  ```console
@z

@x
  2017-01-05T00:35:58.859401177+08:00 container create 0fdb48addc82871eb34eb23a847cfd033dedd1a0a37bef2e6d9eb3870fc7ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:35:58.859401177+08:00 container create 0fdb48addc82871eb34eb23a847cfd033dedd1a0a37bef2e6d9eb3870fc7ff37 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:04.703631903+08:00 network connect e2e1f5ceda09d4300f3a846f0acfaa9a8bb0d89e775eb744c5acecd60e0529e2 (container=0fdb...ff37, name=bridge, type=bridge)
@y
  2017-01-05T00:36:04.703631903+08:00 network connect e2e1f5ceda09d4300f3a846f0acfaa9a8bb0d89e775eb744c5acecd60e0529e2 (container=0fdb...ff37, name=bridge, type=bridge)
@z

@x
  2017-01-05T00:36:04.795031609+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:36:04.795031609+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:09.830268747+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@y
  2017-01-05T00:36:09.830268747+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@z

@x
  2017-01-05T00:36:09.840186338+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@y
  2017-01-05T00:36:09.840186338+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:09.880113663+08:00 network disconnect e2e...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@y
  2017-01-05T00:36:09.880113663+08:00 network disconnect e2e...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@z

@x
  2017-01-05T00:36:09.890214053+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
  ```
@y
  2017-01-05T00:36:09.890214053+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
  ```
@z

@x
  To exit the `docker system events` command, use `CTRL+C`.
@y
  `docker system events`コマンドから抜け出るには`CTRL+C`を入力します。
@z

@x
  ### Filter events by time
@y
  {: #filter-events-by-time }
  ### 時刻によるイベントのフィルター検索
@z

@x
  You can filter the output by an absolute timestamp or relative time on the host
  machine, using the following different time syntaxes:
@y
  時刻を用いてフィルター検索を行うことができます。
  時刻はホストマシン上の絶対時間か相対時間を指定できます。
  以下のようなさまざまな指定が可能です。
@z

@x
  ```bash
  $ docker system events --since 1483283804
@y
  ```bash
  $ docker system events --since 1483283804
@z

@x
  2017-01-05T00:35:41.241772953+08:00 volume create testVol (driver=local)
@y
  2017-01-05T00:35:41.241772953+08:00 volume create testVol (driver=local)
@z

@x
  2017-01-05T00:35:58.859401177+08:00 container create d9cd...4d70 (image=alpine:latest, name=test)
@y
  2017-01-05T00:35:58.859401177+08:00 container create d9cd...4d70 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:04.703631903+08:00 network connect e2e1...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@y
  2017-01-05T00:36:04.703631903+08:00 network connect e2e1...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@z

@x
  2017-01-05T00:36:04.795031609+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:36:04.795031609+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:09.830268747+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@y
  2017-01-05T00:36:09.830268747+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@z

@x
  2017-01-05T00:36:09.840186338+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@y
  2017-01-05T00:36:09.840186338+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:09.880113663+08:00 network disconnect e2e...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@y
  2017-01-05T00:36:09.880113663+08:00 network disconnect e2e...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@z

@x
  2017-01-05T00:36:09.890214053+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:36:09.890214053+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  $ docker system events --since '2017-01-05'
@y
  $ docker system events --since '2017-01-05'
@z

@x
  2017-01-05T00:35:41.241772953+08:00 volume create testVol (driver=local)
@y
  2017-01-05T00:35:41.241772953+08:00 volume create testVol (driver=local)
@z

@x
  2017-01-05T00:35:58.859401177+08:00 container create d9cd...4d70 (image=alpine:latest, name=test)
@y
  2017-01-05T00:35:58.859401177+08:00 container create d9cd...4d70 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:04.703631903+08:00 network connect e2e1...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@y
  2017-01-05T00:36:04.703631903+08:00 network connect e2e1...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@z

@x
  2017-01-05T00:36:04.795031609+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:36:04.795031609+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:09.830268747+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@y
  2017-01-05T00:36:09.830268747+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@z

@x
  2017-01-05T00:36:09.840186338+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@y
  2017-01-05T00:36:09.840186338+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:09.880113663+08:00 network disconnect e2e...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@y
  2017-01-05T00:36:09.880113663+08:00 network disconnect e2e...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@z

@x
  2017-01-05T00:36:09.890214053+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:36:09.890214053+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  $ docker system events --since '2013-09-03T15:49:29'
@y
  $ docker system events --since '2013-09-03T15:49:29'
@z

@x
  2017-01-05T00:35:41.241772953+08:00 volume create testVol (driver=local)
@y
  2017-01-05T00:35:41.241772953+08:00 volume create testVol (driver=local)
@z

@x
  2017-01-05T00:35:58.859401177+08:00 container create d9cd...4d70 (image=alpine:latest, name=test)
@y
  2017-01-05T00:35:58.859401177+08:00 container create d9cd...4d70 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:04.703631903+08:00 network connect e2e1...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@y
  2017-01-05T00:36:04.703631903+08:00 network connect e2e1...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@z

@x
  2017-01-05T00:36:04.795031609+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:36:04.795031609+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:09.830268747+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@y
  2017-01-05T00:36:09.830268747+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@z

@x
  2017-01-05T00:36:09.840186338+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@y
  2017-01-05T00:36:09.840186338+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:09.880113663+08:00 network disconnect e2e...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@y
  2017-01-05T00:36:09.880113663+08:00 network disconnect e2e...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@z

@x
  2017-01-05T00:36:09.890214053+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:36:09.890214053+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  $ docker system events --since '10m'
@y
  $ docker system events --since '10m'
@z

@x
  2017-01-05T00:35:41.241772953+08:00 volume create testVol (driver=local)
@y
  2017-01-05T00:35:41.241772953+08:00 volume create testVol (driver=local)
@z

@x
  2017-01-05T00:35:58.859401177+08:00 container create d9cd...4d70 (image=alpine:latest, name=test)
@y
  2017-01-05T00:35:58.859401177+08:00 container create d9cd...4d70 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:04.703631903+08:00 network connect e2e1...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@y
  2017-01-05T00:36:04.703631903+08:00 network connect e2e1...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@z

@x
  2017-01-05T00:36:04.795031609+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:36:04.795031609+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:09.830268747+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@y
  2017-01-05T00:36:09.830268747+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@z

@x
  2017-01-05T00:36:09.840186338+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@y
  2017-01-05T00:36:09.840186338+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:36:09.880113663+08:00 network disconnect e2e...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@y
  2017-01-05T00:36:09.880113663+08:00 network disconnect e2e...29e2 (container=0fdb...ff37, name=bridge, type=bridge)
@z

@x
  2017-01-05T00:36:09.890214053+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
  ```
@y
  2017-01-05T00:36:09.890214053+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
  ```
@z

@x
  ### Filter events by criteria
@y
  ### Filter events by criteria
@z

@x
  The following commands show several different ways to filter the `docker event`
  output.
@y
  The following commands show several different ways to filter the `docker event`
  output.
@z

@x
  ```bash
@y
  ```bash
@z

@x
  $ docker system events --filter 'event=stop'
@y
  $ docker system events --filter 'event=stop'
@z

@x
  2017-01-05T00:40:22.880175420+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:40:22.880175420+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:41:17.888104182+08:00 container stop 2a8f...4e78 (image=alpine, name=kickass_brattain)
@y
  2017-01-05T00:41:17.888104182+08:00 container stop 2a8f...4e78 (image=alpine, name=kickass_brattain)
@z

@x
  $ docker system events --filter 'image=alpine'
@y
  $ docker system events --filter 'image=alpine'
@z

@x
  2017-01-05T00:41:55.784240236+08:00 container create d9cd...4d70 (image=alpine, name=happy_meitner)
@y
  2017-01-05T00:41:55.784240236+08:00 container create d9cd...4d70 (image=alpine, name=happy_meitner)
@z

@x
  2017-01-05T00:41:55.913156783+08:00 container start d9cd...4d70 (image=alpine, name=happy_meitner)
@y
  2017-01-05T00:41:55.913156783+08:00 container start d9cd...4d70 (image=alpine, name=happy_meitner)
@z

@x
  2017-01-05T00:42:01.106875249+08:00 container kill d9cd...4d70 (image=alpine, name=happy_meitner, signal=15)
@y
  2017-01-05T00:42:01.106875249+08:00 container kill d9cd...4d70 (image=alpine, name=happy_meitner, signal=15)
@z

@x
  2017-01-05T00:42:11.111934041+08:00 container kill d9cd...4d70 (image=alpine, name=happy_meitner, signal=9)
@y
  2017-01-05T00:42:11.111934041+08:00 container kill d9cd...4d70 (image=alpine, name=happy_meitner, signal=9)
@z

@x
  2017-01-05T00:42:11.119578204+08:00 container die d9cd...4d70 (exitCode=137, image=alpine, name=happy_meitner)
@y
  2017-01-05T00:42:11.119578204+08:00 container die d9cd...4d70 (exitCode=137, image=alpine, name=happy_meitner)
@z

@x
  2017-01-05T00:42:11.173276611+08:00 container stop d9cd...4d70 (image=alpine, name=happy_meitner)
@y
  2017-01-05T00:42:11.173276611+08:00 container stop d9cd...4d70 (image=alpine, name=happy_meitner)
@z

@x
  $ docker system events --filter 'container=test'
@y
  $ docker system events --filter 'container=test'
@z

@x
  2017-01-05T00:43:00.139719934+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:43:00.139719934+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:43:09.259951086+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@y
  2017-01-05T00:43:09.259951086+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=15)
@z

@x
  2017-01-05T00:43:09.270102715+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@y
  2017-01-05T00:43:09.270102715+08:00 container die 0fdb...ff37 (exitCode=143, image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:43:09.312556440+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:43:09.312556440+08:00 container stop 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  $ docker system events --filter 'container=test' --filter 'container=d9cdb1525ea8'
@y
  $ docker system events --filter 'container=test' --filter 'container=d9cdb1525ea8'
@z

@x
  2017-01-05T00:44:11.517071981+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:44:11.517071981+08:00 container start 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:44:17.685870901+08:00 container start d9cd...4d70 (image=alpine, name=happy_meitner)
@y
  2017-01-05T00:44:17.685870901+08:00 container start d9cd...4d70 (image=alpine, name=happy_meitner)
@z

@x
  2017-01-05T00:44:29.757658470+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=9)
@y
  2017-01-05T00:44:29.757658470+08:00 container kill 0fdb...ff37 (image=alpine:latest, name=test, signal=9)
@z

@x
  2017-01-05T00:44:29.767718510+08:00 container die 0fdb...ff37 (exitCode=137, image=alpine:latest, name=test)
@y
  2017-01-05T00:44:29.767718510+08:00 container die 0fdb...ff37 (exitCode=137, image=alpine:latest, name=test)
@z

@x
  2017-01-05T00:44:29.815798344+08:00 container destroy 0fdb...ff37 (image=alpine:latest, name=test)
@y
  2017-01-05T00:44:29.815798344+08:00 container destroy 0fdb...ff37 (image=alpine:latest, name=test)
@z

@x
  $ docker system events --filter 'container=test' --filter 'event=stop'
@y
  $ docker system events --filter 'container=test' --filter 'event=stop'
@z

@x
  2017-01-05T00:46:13.664099505+08:00 container stop a9d1...e130 (image=alpine, name=test)
@y
  2017-01-05T00:46:13.664099505+08:00 container stop a9d1...e130 (image=alpine, name=test)
@z

@x
  $ docker system events --filter 'type=volume'
@y
  $ docker system events --filter 'type=volume'
@z

@x
  2015-12-23T21:05:28.136212689Z volume create test-event-volume-local (driver=local)
@y
  2015-12-23T21:05:28.136212689Z volume create test-event-volume-local (driver=local)
@z

@x
  2015-12-23T21:05:28.383462717Z volume mount test-event-volume-local (read/write=true, container=562f...5025, destination=/foo, driver=local, propagation=rprivate)
@y
  2015-12-23T21:05:28.383462717Z volume mount test-event-volume-local (read/write=true, container=562f...5025, destination=/foo, driver=local, propagation=rprivate)
@z

@x
  2015-12-23T21:05:28.650314265Z volume unmount test-event-volume-local (container=562f...5025, driver=local)
@y
  2015-12-23T21:05:28.650314265Z volume unmount test-event-volume-local (container=562f...5025, driver=local)
@z

@x
  2015-12-23T21:05:28.716218405Z volume destroy test-event-volume-local (driver=local)
@y
  2015-12-23T21:05:28.716218405Z volume destroy test-event-volume-local (driver=local)
@z

@x
  $ docker system events --filter 'type=network'
@y
  $ docker system events --filter 'type=network'
@z

@x
  2015-12-23T21:38:24.705709133Z network create 8b11...2c5b (name=test-event-network-local, type=bridge)
@y
  2015-12-23T21:38:24.705709133Z network create 8b11...2c5b (name=test-event-network-local, type=bridge)
@z

@x
  2015-12-23T21:38:25.119625123Z network connect 8b11...2c5b (name=test-event-network-local, container=b4be...c54e, type=bridge)
@y
  2015-12-23T21:38:25.119625123Z network connect 8b11...2c5b (name=test-event-network-local, container=b4be...c54e, type=bridge)
@z

@x
  $ docker system events --filter 'container=container_1' --filter 'container=container_2'
@y
  $ docker system events --filter 'container=container_1' --filter 'container=container_2'
@z

@x
  2014-09-03T15:49:29.999999999Z07:00 container die 4386fb97867d (image=ubuntu-1:14.04)
@y
  2014-09-03T15:49:29.999999999Z07:00 container die 4386fb97867d (image=ubuntu-1:14.04)
@z

@x
  2014-05-10T17:42:14.999999999Z07:00 container stop 4386fb97867d (image=ubuntu-1:14.04)
@y
  2014-05-10T17:42:14.999999999Z07:00 container stop 4386fb97867d (image=ubuntu-1:14.04)
@z

@x
  2014-05-10T17:42:14.999999999Z07:00 container die 7805c1d35632 (imager=redis:2.8)
@y
  2014-05-10T17:42:14.999999999Z07:00 container die 7805c1d35632 (imager=redis:2.8)
@z

@x
  2014-09-03T15:49:29.999999999Z07:00 container stop 7805c1d35632 (image=redis:2.8)
@y
  2014-09-03T15:49:29.999999999Z07:00 container stop 7805c1d35632 (image=redis:2.8)
@z

@x
  $ docker system events --filter 'type=volume'
@y
  $ docker system events --filter 'type=volume'
@z

@x
  2015-12-23T21:05:28.136212689Z volume create test-event-volume-local (driver=local)
@y
  2015-12-23T21:05:28.136212689Z volume create test-event-volume-local (driver=local)
@z

@x
  2015-12-23T21:05:28.383462717Z volume mount test-event-volume-local (read/write=true, container=562fe10671e9273da25eed36cdce26159085ac7ee6707105fd534866340a5025, destination=/foo, driver=local, propagation=rprivate)
@y
  2015-12-23T21:05:28.383462717Z volume mount test-event-volume-local (read/write=true, container=562fe10671e9273da25eed36cdce26159085ac7ee6707105fd534866340a5025, destination=/foo, driver=local, propagation=rprivate)
@z

@x
  2015-12-23T21:05:28.650314265Z volume unmount test-event-volume-local (container=562fe10671e9273da25eed36cdce26159085ac7ee6707105fd534866340a5025, driver=local)
@y
  2015-12-23T21:05:28.650314265Z volume unmount test-event-volume-local (container=562fe10671e9273da25eed36cdce26159085ac7ee6707105fd534866340a5025, driver=local)
@z

@x
  2015-12-23T21:05:28.716218405Z volume destroy test-event-volume-local (driver=local)
@y
  2015-12-23T21:05:28.716218405Z volume destroy test-event-volume-local (driver=local)
@z

@x
  $ docker system events --filter 'type=network'
@y
  $ docker system events --filter 'type=network'
@z

@x
  2015-12-23T21:38:24.705709133Z network create 8b111217944ba0ba844a65b13efcd57dc494932ee2527577758f939315ba2c5b (name=test-event-network-local, type=bridge)
@y
  2015-12-23T21:38:24.705709133Z network create 8b111217944ba0ba844a65b13efcd57dc494932ee2527577758f939315ba2c5b (name=test-event-network-local, type=bridge)
@z

@x
  2015-12-23T21:38:25.119625123Z network connect 8b111217944ba0ba844a65b13efcd57dc494932ee2527577758f939315ba2c5b (name=test-event-network-local, container=b4be644031a3d90b400f88ab3d4bdf4dc23adb250e696b6328b85441abe2c54e, type=bridge)
@y
  2015-12-23T21:38:25.119625123Z network connect 8b111217944ba0ba844a65b13efcd57dc494932ee2527577758f939315ba2c5b (name=test-event-network-local, container=b4be644031a3d90b400f88ab3d4bdf4dc23adb250e696b6328b85441abe2c54e, type=bridge)
@z

@x
  $ docker system events --filter 'type=plugin'
@y
  $ docker system events --filter 'type=plugin'
@z

@x
  2016-07-25T17:30:14.825557616Z plugin pull ec7b87f2ce84330fe076e666f17dfc049d2d7ae0b8190763de94e1f2d105993f (name=tiborvass/sample-volume-plugin:latest)
@y
  2016-07-25T17:30:14.825557616Z plugin pull ec7b87f2ce84330fe076e666f17dfc049d2d7ae0b8190763de94e1f2d105993f (name=tiborvass/sample-volume-plugin:latest)
@z

@x
  2016-07-25T17:30:14.888127370Z plugin enable ec7b87f2ce84330fe076e666f17dfc049d2d7ae0b8190763de94e1f2d105993f (name=tiborvass/sample-volume-plugin:latest)
  ```
@y
  2016-07-25T17:30:14.888127370Z plugin enable ec7b87f2ce84330fe076e666f17dfc049d2d7ae0b8190763de94e1f2d105993f (name=tiborvass/sample-volume-plugin:latest)
  ```
@z

@x
  ### Format the output
@y
  {: #format-the-output }
  ### Format the output
@z

@x
  ```bash
@y
  ```bash
@z

@x
  $ docker system events --filter 'type=container' --format 'Type={{.Type}}  Status={{.Status}}  ID={{.ID}}'
@y
  $ docker system events --filter 'type=container' --format 'Type={{.Type}}  Status={{.Status}}  ID={{.ID}}'
@z

@x
  Type=container  Status=create  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  Type=container  Status=attach  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  Type=container  Status=start  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  Type=container  Status=resize  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  Type=container  Status=die  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  Type=container  Status=destroy  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  ```
@y
  Type=container  Status=create  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  Type=container  Status=attach  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  Type=container  Status=start  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  Type=container  Status=resize  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  Type=container  Status=die  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  Type=container  Status=destroy  ID=2ee349dac409e97974ce8d01b70d250b85e0ba8189299c126a87812311951e26
  ```
@z

@x
  #### Format as JSON
@y
  {: #format-as-json }
  #### Format as JSON
@z

@x
  ```bash
@y
  ```bash
@z

@x
  $ docker system events --format '{{json .}}'
@y
  $ docker system events --format '{{json .}}'
@z

@x
  {"status":"create","id":"196016a57679bf42424484918746a9474cd905dd993c4d0f4..
  {"status":"attach","id":"196016a57679bf42424484918746a9474cd905dd993c4d0f4..
  {"Type":"network","Action":"connect","Actor":{"ID":"1b50a5bf755f6021dfa78e..
  {"status":"start","id":"196016a57679bf42424484918746a9474cd905dd993c4d0f42..
  {"status":"resize","id":"196016a57679bf42424484918746a9474cd905dd993c4d0f4..
  ```
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@y
  {"status":"create","id":"196016a57679bf42424484918746a9474cd905dd993c4d0f4..
  {"status":"attach","id":"196016a57679bf42424484918746a9474cd905dd993c4d0f4..
  {"Type":"network","Action":"connect","Actor":{"ID":"1b50a5bf755f6021dfa78e..
  {"status":"start","id":"196016a57679bf42424484918746a9474cd905dd993c4d0f42..
  {"status":"resize","id":"196016a57679bf42424484918746a9474cd905dd993c4d0f4..
  ```
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@z
