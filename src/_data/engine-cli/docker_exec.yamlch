%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
command: docker exec
short: Run a command in a running container
@y
command: docker exec
short: 実行中のコンテナー内でコマンドを実行します。
@z

@x
long: |-
  The `docker exec` command runs a new command in a running container.
@y
long: |-
  `docker exec`コマンドを、実行中のコンテナー内において新たなコマンドを実行します。
@z

@x
  The command started using `docker exec` only runs while the container's primary
  process (`PID 1`) is running, and it is not restarted if the container is
  restarted.
@y
  `docker exec`を使って指示されるコマンドは、コンテナーの主要プロセス（`PID 1`）が実行中である場合のみ実行されます。
  そしてコンテナーが再起動された際には、再実行されません。
@z

@x
  COMMAND will run in the default directory of the container. If the
  underlying image has a custom directory specified with the WORKDIR directive
  in its Dockerfile, this will be used instead.
@y
  COMMAND はコンテナーのデフォルトディレクトリにおいて実行されます。
  コンテナーの元になるイメージが、Dockerfile 内の WORKDIR ディレクティブの指定により、特定ディレクトリを指定している場合は、そのディレクトリにおいて実行されます。
@z

@x
  COMMAND should be an executable, a chained or a quoted command
  will not work. Example: `docker exec -ti my_container "echo a && echo b"` will
  not work, but `docker exec -ti my_container sh -c "echo a && echo b"` will.
@y
  COMMAND は実行可能である必要があり、連結されていたりクォートで囲まれていたりすると動作しません。
  例として`docker exec -ti my_container "echo a && echo b"`は動作しませんが、`docker exec -ti my_container sh -c "echo a && echo b"`であれば動作します。
@z

@x
usage: docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
pname: docker
plink: docker.yaml
options:
@y
usage: docker exec [オプション] CONTAINER COMMAND [ARG...]
pname: docker
plink: docker.yaml
options:
@z

@x
- option: detach
  shorthand: d
  value_type: bool
  default_value: "false"
  description: 'Detached mode: run command in the background'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: detach
  shorthand: d
  value_type: bool
  default_value: "false"
  description: 'デタッチモード。つまりコマンドをバックグラウンドで実行します。'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: detach-keys
  value_type: string
  description: Override the key sequence for detaching a container
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: detach-keys
  value_type: string
  description: コンテナーデタッチ時のキーシーケンスをオーバーライドします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: env
  shorthand: e
  value_type: list
  description: Set environment variables
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: env
  shorthand: e
  value_type: list
  description: 環境変数を設定します。
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: env-file
  value_type: list
  description: Read in a file of environment variables
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: env-file
  value_type: list
  description: 環境変数ファイルを読み込みます。
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: interactive
  shorthand: i
  value_type: bool
  default_value: "false"
  description: Keep STDIN open even if not attached
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: interactive
  shorthand: i
  value_type: bool
  default_value: "false"
  description: アタッチされていなくても STDIN は開放し続けます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: privileged
  value_type: bool
  default_value: "false"
  description: Give extended privileges to the command
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: privileged
  value_type: bool
  default_value: "false"
  description: コマンドに拡張権限を付与します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: tty
  shorthand: t
  value_type: bool
  default_value: "false"
  description: Allocate a pseudo-TTY
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: tty
  shorthand: t
  value_type: bool
  default_value: "false"
  description: 擬似 TTY を割り当てます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: user
  shorthand: u
  value_type: string
  description: 'Username or UID (format: <name|uid>[:<group|gid>])'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: user
  shorthand: u
  value_type: string
  description: 'ユーザー名または UID。（記述書式t: \<name|uid\>[:\<group|gid\>]）'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: workdir
  shorthand: w
  value_type: string
  description: Working directory inside the container
  deprecated: false
  min_api_version: "1.35"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: workdir
  shorthand: w
  value_type: string
  description: コンテナー内部のワーキングディレクトリ。
  deprecated: false
  min_api_version: "1.35"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
examples: |-
  ### Run `docker exec` on a running container
@y
examples: |-
  {: #run-docker-exec-on-a-running-container }
  ### 実行中コンテナーでの`docker exec`実行
@z

@x
  First, start a container.
@y
  はじめにコンテナーを起動させます。
@z

@x
  ```bash
  $ docker run --name ubuntu_bash --rm -i -t ubuntu bash
  ```
@y
  ```bash
  $ docker run --name ubuntu_bash --rm -i -t ubuntu bash
  ```
@z

@x
  This will create a container named `ubuntu_bash` and start a Bash session.
@y
  上では`ubuntu_bash`という名のコンテナーが生成されて、Bash セッションが起動します。
@z

@x
  Next, execute a command on the container.
@y
  次にそのコンテナー上においてコマンドを実行します。
@z

@x
  ```bash
  $ docker exec -d ubuntu_bash touch /tmp/execWorks
  ```
@y
  ```bash
  $ docker exec -d ubuntu_bash touch /tmp/execWorks
  ```
@z

@x
  This will create a new file `/tmp/execWorks` inside the running container
  `ubuntu_bash`, in the background.
@y
  これはバックグラウンドで実行中のコンテナー`ubuntu_bash`内において、新規ファイル`/tmp/execWorks`を生成します。
@z

@x
  Next, execute an interactive `bash` shell on the container.
@y
  次にそのコンテナー上において、対話形式の`bash`シェルを起動します。
@z

@x
  ```bash
  $ docker exec -it ubuntu_bash bash
  ```
@y
  ```bash
  $ docker exec -it ubuntu_bash bash
  ```
@z

@x
  This will create a new Bash session in the container `ubuntu_bash`.
@y
  コンテナー`ubuntu_bash`内において新たな Bash セッションを生成します。
@z

@x
  Next, set an environment variable in the current bash session.
@y
  次にカレントな Bash セッションにおいて環境変数を設定します。
@z

@x
  ```bash
  $ docker exec -it -e VAR=1 ubuntu_bash bash
  ```
@y
  ```bash
  $ docker exec -it -e VAR=1 ubuntu_bash bash
  ```
@z

@x
  This will create a new Bash session in the container `ubuntu_bash` with environment
  variable `$VAR` set to "1". Note that this environment variable will only be valid
  on the current Bash session.
@y
  これはコンテナー`ubuntu_bash`内に新たな Bash セッションを生成して、環境変数`$VAR`に "1" を設定します。
  なおこの環境変数は、カレントな Bash セッション内においてのみ有効です。
@z

@x
  By default `docker exec` command runs in the same working directory set when container was created.
@y
  デフォルトにおいて`docker exec`コマンドは、コンテナーの生成時に設定されたワーキングディレクトリにおいて動作します。
@z

@x
  ```bash
  $ docker exec -it ubuntu_bash pwd
  /
  ```
@y
  ```bash
  $ docker exec -it ubuntu_bash pwd
  /
  ```
@z

@x
  You can select working directory for the command to execute into
@y
  コマンドを実行するワーキングディレクトリは変更することができます。
@z

@x
  ```bash
  $ docker exec -it -w /root ubuntu_bash pwd
  /root
  ```
@y
  ```bash
  $ docker exec -it -w /root ubuntu_bash pwd
  /root
  ```
@z

@x
  ### Try to run `docker exec` on a paused container
@y
  {: #try-to-run-docker-exec-on-a-paused-container }
  ### 停止中コンテナーでの`docker exec`実行
@z

@x
  If the container is paused, then the `docker exec` command will fail with an error:
@y
  コンテナーが停止中である場合に`docker exec`コマンドを実行すると、エラーが発生します。
@z

@x
  ```bash
  $ docker pause test

  test
@y
  ```bash
  $ docker pause test

  test
@z

@x
  $ docker ps

  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                   PORTS               NAMES
  1ae3b36715d2        ubuntu:latest       "bash"              17 seconds ago      Up 16 seconds (Paused)                       test
@y
  $ docker ps

  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                   PORTS               NAMES
  1ae3b36715d2        ubuntu:latest       "bash"              17 seconds ago      Up 16 seconds (Paused)                       test
@z

@x
  $ docker exec test ls

  FATA[0000] Error response from daemon: Container test is paused, unpause the container before exec

  $ echo $?
  1
  ```
@y
  $ docker exec test ls

  FATA[0000] Error response from daemon: Container test is paused, unpause the container before exec

  $ echo $?
  1
  ```
@z

@x
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@y
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@z
