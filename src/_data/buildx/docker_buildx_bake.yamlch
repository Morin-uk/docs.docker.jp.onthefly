%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
command: docker buildx bake
aliases: f
short: Build from a file
long: |-
  Bake is a high-level build command. Each specified target will run in parallel
  as part of the build.
usage: docker buildx bake [OPTIONS] [TARGET...]
pname: docker buildx
plink: docker_buildx.yaml
options:
@y
command: docker buildx bake
aliases: f
short: ファイルからビルドします。
long: |-
  bake は高レベルのビルドコマンドです。
  指定されたターゲットは、ビルドの一部として並行して実行されます。
usage: docker buildx bake [オプション] [TARGET...]
pname: docker buildx
plink: docker_buildx.yaml
options:
@z

@x
- option: file
  shorthand: f
  value_type: stringArray
  default_value: '[]'
  description: Build definition file
  details_url: '#file'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: file
  shorthand: f
  value_type: stringArray
  default_value: '[]'
  description: ビルド定義ファイル。
  details_url: '#file'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: load
  value_type: bool
  default_value: "false"
  description: Shorthand for --set=*.output=type=docker
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: load
  value_type: bool
  default_value: "false"
  description: --set=*.output=type=docker の短縮形。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: no-cache
  value_type: bool
  default_value: "false"
  description: Do not use cache when building the image
  details_url: '#no-cache'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: no-cache
  value_type: bool
  default_value: "false"
  description: イメージビルド時にキャッシュを利用しません。
  details_url: '#no-cache'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: print
  value_type: bool
  default_value: "false"
  description: Print the options without building
  details_url: '#print'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: print
  value_type: bool
  default_value: "false"
  description: ビルドを行わず、オプションを表示します。
  details_url: '#print'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: progress
  value_type: string
  default_value: auto
  description: |
    Set type of progress output (auto, plain, tty). Use plain to show container output
  details_url: '#progress'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: progress
  value_type: string
  default_value: auto
  description: |
    処理経過の出力タイプを設定します（auto、plain、tty）。コンテナー出力には plain が用いられます。
  details_url: '#progress'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: pull
  value_type: bool
  default_value: "false"
  description: Always attempt to pull a newer version of the image
  details_url: '#pull'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: pull
  value_type: bool
  default_value: "false"
  description: 常に最新イメージのプルを試みます。
  details_url: '#pull'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: push
  value_type: bool
  default_value: "false"
  description: Shorthand for --set=*.output=type=registry
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: push
  value_type: bool
  default_value: "false"
  description: --set=*.output=type=registry の短縮形。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: set
  value_type: stringArray
  default_value: '[]'
  description: 'Override target value (eg: targetpattern.key=value)'
  details_url: '#set'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: set
  value_type: stringArray
  default_value: '[]'
  description: 'target の値をオーバーライドします（targetpattern.key=value）。'
  details_url: '#set'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
inherited_options:
- option: builder
  value_type: string
  description: Override the configured builder instance
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
inherited_options:
- option: builder
  value_type: string
  description: 設定された builder インスタンスをオーバーライドします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
examples: |-
  ### Specify a build definition file (-f, --file) {#file}
@y
examples: |-
  ### Specify a build definition file (-f, --file) {#file}
@z

@x
  By default, `buildx bake` looks for build definition files in the current directory,
  the following are parsed:
@y
  By default, `buildx bake` looks for build definition files in the current directory,
  the following are parsed:
@z

@x
  - `docker-compose.yml`
  - `docker-compose.yaml`
  - `docker-bake.json`
  - `docker-bake.override.json`
  - `docker-bake.hcl`
  - `docker-bake.override.hcl`
@y
  - `docker-compose.yml`
  - `docker-compose.yaml`
  - `docker-bake.json`
  - `docker-bake.override.json`
  - `docker-bake.hcl`
  - `docker-bake.override.hcl`
@z

@x
  Use the `-f` / `--file` option to specify the build definition file to use. The
  file can be a Docker Compose, JSON or HCL file. If multiple files are specified
  they are all read and configurations are combined.
@y
  Use the `-f` / `--file` option to specify the build definition file to use. The
  file can be a Docker Compose, JSON or HCL file. If multiple files are specified
  they are all read and configurations are combined.
@z

@x
  The following example uses a Docker Compose file named `docker-compose.dev.yaml`
  as build definition file, and builds all targets in the file:
@y
  The following example uses a Docker Compose file named `docker-compose.dev.yaml`
  as build definition file, and builds all targets in the file:
@z

@x
  ```console
  $ docker buildx bake -f docker-compose.dev.yaml

  [+] Building 66.3s (30/30) FINISHED
   => [frontend internal] load build definition from Dockerfile  0.1s
   => => transferring dockerfile: 36B                            0.0s
   => [backend internal] load build definition from Dockerfile   0.2s
   => => transferring dockerfile: 3.73kB                         0.0s
   => [database internal] load build definition from Dockerfile  0.1s
   => => transferring dockerfile: 5.77kB                         0.0s
   ...
  ```
@y
  ```console
  $ docker buildx bake -f docker-compose.dev.yaml

  [+] Building 66.3s (30/30) FINISHED
   => [frontend internal] load build definition from Dockerfile  0.1s
   => => transferring dockerfile: 36B                            0.0s
   => [backend internal] load build definition from Dockerfile   0.2s
   => => transferring dockerfile: 3.73kB                         0.0s
   => [database internal] load build definition from Dockerfile  0.1s
   => => transferring dockerfile: 5.77kB                         0.0s
   ...
  ```
@z

@x
  Pass the names of the targets to build, to build only specific target(s). The
  following example builds the `backend` and `database` targets that are defined
  in the `docker-compose.dev.yaml` file, skipping the build for the `frontend`
  target:
@y
  Pass the names of the targets to build, to build only specific target(s). The
  following example builds the `backend` and `database` targets that are defined
  in the `docker-compose.dev.yaml` file, skipping the build for the `frontend`
  target:
@z

@x
  ```console
  $ docker buildx bake -f docker-compose.dev.yaml backend database

  [+] Building 2.4s (13/13) FINISHED
   => [backend internal] load build definition from Dockerfile  0.1s
   => => transferring dockerfile: 81B                           0.0s
   => [database internal] load build definition from Dockerfile 0.2s
   => => transferring dockerfile: 36B                           0.0s
   => [backend internal] load .dockerignore                     0.3s
   ...
  ```
@y
  ```console
  $ docker buildx bake -f docker-compose.dev.yaml backend database

  [+] Building 2.4s (13/13) FINISHED
   => [backend internal] load build definition from Dockerfile  0.1s
   => => transferring dockerfile: 81B                           0.0s
   => [database internal] load build definition from Dockerfile 0.2s
   => => transferring dockerfile: 36B                           0.0s
   => [backend internal] load .dockerignore                     0.3s
   ...
  ```
@z

@x
  ### Do not use cache when building the image (--no-cache) {#no-cache}
@y
  ### Do not use cache when building the image (--no-cache) {#no-cache}
@z

@x
  Same as `build --no-cache`. Do not use cache when building the image.
@y
  Same as `build --no-cache`. Do not use cache when building the image.
@z

@x
  ### Print the options without building (--print) {#print}
@y
  ### Print the options without building (--print) {#print}
@z

@x
  Prints the resulting options of the targets desired to be built, in a JSON format,
  without starting a build.
@y
  Prints the resulting options of the targets desired to be built, in a JSON format,
  without starting a build.
@z

@x
  ```console
  $ docker buildx bake -f docker-bake.hcl --print db
  {
     "target": {
        "db": {
           "context": "./",
           "dockerfile": "Dockerfile",
           "tags": [
              "docker.io/tiborvass/db"
           ]
        }
     }
  }
  ```
@y
  ```console
  $ docker buildx bake -f docker-bake.hcl --print db
  {
     "target": {
        "db": {
           "context": "./",
           "dockerfile": "Dockerfile",
           "tags": [
              "docker.io/tiborvass/db"
           ]
        }
     }
  }
  ```
@z

@x
  ### Set type of progress output (--progress) {#progress}
@y
  ### Set type of progress output (--progress) {#progress}
@z

@x
  Same as `build --progress`. Set type of progress output (auto, plain, tty). Use
  plain to show container output (default "auto").
@y
  Same as `build --progress`. Set type of progress output (auto, plain, tty). Use
  plain to show container output (default "auto").
@z

@x
  The following example uses `plain` output during the build:
@y
  The following example uses `plain` output during the build:
@z

@x
  ```console
  $ docker buildx bake --progress=plain

  #2 [backend internal] load build definition from Dockerfile.test
  #2 sha256:de70cb0bb6ed8044f7b9b1b53b67f624e2ccfb93d96bb48b70c1fba562489618
  #2 ...

  #1 [database internal] load build definition from Dockerfile.test
  #1 sha256:453cb50abd941762900a1212657a35fc4aad107f5d180b0ee9d93d6b74481bce
  #1 transferring dockerfile: 36B done
  #1 DONE 0.1s
  ...
  ```
@y
  ```console
  $ docker buildx bake --progress=plain

  #2 [backend internal] load build definition from Dockerfile.test
  #2 sha256:de70cb0bb6ed8044f7b9b1b53b67f624e2ccfb93d96bb48b70c1fba562489618
  #2 ...

  #1 [database internal] load build definition from Dockerfile.test
  #1 sha256:453cb50abd941762900a1212657a35fc4aad107f5d180b0ee9d93d6b74481bce
  #1 transferring dockerfile: 36B done
  #1 DONE 0.1s
  ...
  ```
@z

@x
  ### Always attempt to pull a newer version of the image (--pull) {#pull}
@y
  ### Always attempt to pull a newer version of the image (--pull) {#pull}
@z

@x
  Same as `build --pull`.
@y
  Same as `build --pull`.
@z

@x
  ### Override target configurations from command line (--set) {#set}
@y
  ### Override target configurations from command line (--set) {#set}
@z

@x
  ```
  --set targetpattern.key[.subkey]=value
  ```
@y
  ```
  --set targetpattern.key[.subkey]=value
  ```
@z

@x
  Override target configurations from command line. The pattern matching syntax is
  defined in https://golang.org/pkg/path/#Match.
@y
  Override target configurations from command line. The pattern matching syntax is
  defined in https://golang.org/pkg/path/#Match.
@z

@x
  **Examples**
@y
  **Examples**
@z

@x
  ```console
  $ docker buildx bake --set target.args.mybuildarg=value
  $ docker buildx bake --set target.platform=linux/arm64
  $ docker buildx bake --set foo*.args.mybuildarg=value # overrides build arg for all targets starting with 'foo'
  $ docker buildx bake --set *.platform=linux/arm64     # overrides platform for all targets
  $ docker buildx bake --set foo*.no-cache              # bypass caching only for targets starting with 'foo'
  ```
@y
  ```console
  $ docker buildx bake --set target.args.mybuildarg=value
  $ docker buildx bake --set target.platform=linux/arm64
  $ docker buildx bake --set foo*.args.mybuildarg=value # overrides build arg for all targets starting with 'foo'
  $ docker buildx bake --set *.platform=linux/arm64     # overrides platform for all targets
  $ docker buildx bake --set foo*.no-cache              # bypass caching only for targets starting with 'foo'
  ```
@z

@x
  Complete list of overridable fields:
  args, cache-from, cache-to, context, dockerfile, labels, no-cache, output, platform,
  pull, secrets, ssh, tags, target
@y
  Complete list of overridable fields:
  args, cache-from, cache-to, context, dockerfile, labels, no-cache, output, platform,
  pull, secrets, ssh, tags, target
@z

@x
  ### File definition
@y
  ### File definition
@z

@x
  In addition to compose files, bake supports a JSON and an equivalent HCL file
  format for defining build groups and targets.
@y
  In addition to compose files, bake supports a JSON and an equivalent HCL file
  format for defining build groups and targets.
@z

@x
  A target reflects a single docker build invocation with the same options that
  you would specify for `docker build`. A group is a grouping of targets.
@y
  A target reflects a single docker build invocation with the same options that
  you would specify for `docker build`. A group is a grouping of targets.
@z

@x
  Multiple files can include the same target and final build options will be
  determined by merging them together.
@y
  Multiple files can include the same target and final build options will be
  determined by merging them together.
@z

@x
  In the case of compose files, each service corresponds to a target.
@y
  In the case of compose files, each service corresponds to a target.
@z

@x
  A group can specify its list of targets with the `targets` option. A target can
  inherit build options by setting the `inherits` option to the list of targets or
  groups to inherit from.
@y
  A group can specify its list of targets with the `targets` option. A target can
  inherit build options by setting the `inherits` option to the list of targets or
  groups to inherit from.
@z

@x
  Note: Design of bake command is work in progress, the user experience may change
  based on feedback.
@y
  Note: Design of bake command is work in progress, the user experience may change
  based on feedback.
@z

@x
  **Example HCL definition**
@y
  **Example HCL definition**
@z

@x
  ```hcl
  group "default" {
      targets = ["db", "webapp-dev"]
  }

  target "webapp-dev" {
      dockerfile = "Dockerfile.webapp"
      tags = ["docker.io/username/webapp"]
  }

  target "webapp-release" {
      inherits = ["webapp-dev"]
      platforms = ["linux/amd64", "linux/arm64"]
  }

  target "db" {
      dockerfile = "Dockerfile.db"
      tags = ["docker.io/username/db"]
  }
  ```
@y
  ```hcl
  group "default" {
      targets = ["db", "webapp-dev"]
  }

  target "webapp-dev" {
      dockerfile = "Dockerfile.webapp"
      tags = ["docker.io/username/webapp"]
  }

  target "webapp-release" {
      inherits = ["webapp-dev"]
      platforms = ["linux/amd64", "linux/arm64"]
  }

  target "db" {
      dockerfile = "Dockerfile.db"
      tags = ["docker.io/username/db"]
  }
  ```
@z

@x
  Complete list of valid target fields:
@y
  Complete list of valid target fields:
@z

@x
  `args`, `cache-from`, `cache-to`, `context`, `dockerfile`, `inherits`, `labels`,
  `no-cache`, `output`, `platform`, `pull`, `secrets`, `ssh`, `tags`, `target`
@y
  `args`, `cache-from`, `cache-to`, `context`, `dockerfile`, `inherits`, `labels`,
  `no-cache`, `output`, `platform`, `pull`, `secrets`, `ssh`, `tags`, `target`
@z

@x
  ### HCL variables and functions
@y
  ### HCL variables and functions
@z

@x
  Similar to how Terraform provides a way to [define variables](https://www.terraform.io/docs/configuration/variables.html#declaring-an-input-variable),
  the HCL file format also supports variable block definitions. These can be used
  to define variables with values provided by the current environment, or a default
  value when unset.
@y
  Similar to how Terraform provides a way to [define variables](https://www.terraform.io/docs/configuration/variables.html#declaring-an-input-variable),
  the HCL file format also supports variable block definitions. These can be used
  to define variables with values provided by the current environment, or a default
  value when unset.
@z

@x
  Example of using interpolation to tag an image with the git sha:
@y
  Example of using interpolation to tag an image with the git sha:
@z

@x
  ```console
  $ cat <<'EOF' > docker-bake.hcl
  variable "TAG" {
      default = "latest"
  }

  group "default" {
      targets = ["webapp"]
  }

  target "webapp" {
      tags = ["docker.io/username/webapp:${TAG}"]
  }
  EOF

  $ docker buildx bake --print webapp
  {
     "target": {
        "webapp": {
           "context": ".",
           "dockerfile": "Dockerfile",
           "tags": [
              "docker.io/username/webapp:latest"
           ]
        }
     }
  }

  $ TAG=$(git rev-parse --short HEAD) docker buildx bake --print webapp
  {
     "target": {
        "webapp": {
           "context": ".",
           "dockerfile": "Dockerfile",
           "tags": [
              "docker.io/username/webapp:985e9e9"
           ]
        }
     }
  }
  ```
@y
  ```console
  $ cat <<'EOF' > docker-bake.hcl
  variable "TAG" {
      default = "latest"
  }

  group "default" {
      targets = ["webapp"]
  }

  target "webapp" {
      tags = ["docker.io/username/webapp:${TAG}"]
  }
  EOF

  $ docker buildx bake --print webapp
  {
     "target": {
        "webapp": {
           "context": ".",
           "dockerfile": "Dockerfile",
           "tags": [
              "docker.io/username/webapp:latest"
           ]
        }
     }
  }

  $ TAG=$(git rev-parse --short HEAD) docker buildx bake --print webapp
  {
     "target": {
        "webapp": {
           "context": ".",
           "dockerfile": "Dockerfile",
           "tags": [
              "docker.io/username/webapp:985e9e9"
           ]
        }
     }
  }
  ```
@z

@x
  A [set of generally useful functions](https://github.com/docker/buildx/blob/master/bake/hcl.go#L19-L65)
  provided by [go-cty](https://github.com/zclconf/go-cty/tree/master/cty/function/stdlib)
  are available for use in HCL files. In addition, [user defined functions](https://github.com/hashicorp/hcl/tree/hcl2/ext/userfunc)
  are also supported.
@y
  A [set of generally useful functions](https://github.com/docker/buildx/blob/master/bake/hcl.go#L19-L65)
  provided by [go-cty](https://github.com/zclconf/go-cty/tree/master/cty/function/stdlib)
  are available for use in HCL files. In addition, [user defined functions](https://github.com/hashicorp/hcl/tree/hcl2/ext/userfunc)
  are also supported.
@z

@x
  Example of using the `add` function:
@y
  Example of using the `add` function:
@z

@x
  ```console
  $ cat <<'EOF' > docker-bake.hcl
  variable "TAG" {
      default = "latest"
  }

  group "default" {
      targets = ["webapp"]
  }

  target "webapp" {
      args = {
          buildno = "${add(123, 1)}"
      }
  }
  EOF

  $ docker buildx bake --print webapp
  {
     "target": {
        "webapp": {
           "context": ".",
           "dockerfile": "Dockerfile",
           "args": {
              "buildno": "124"
           }
        }
     }
  }
  ```
@y
  ```console
  $ cat <<'EOF' > docker-bake.hcl
  variable "TAG" {
      default = "latest"
  }

  group "default" {
      targets = ["webapp"]
  }

  target "webapp" {
      args = {
          buildno = "${add(123, 1)}"
      }
  }
  EOF

  $ docker buildx bake --print webapp
  {
     "target": {
        "webapp": {
           "context": ".",
           "dockerfile": "Dockerfile",
           "args": {
              "buildno": "124"
           }
        }
     }
  }
  ```
@z

@x
  Example of defining an `increment` function:
@y
  Example of defining an `increment` function:
@z

@x
  ```console
  $ cat <<'EOF' > docker-bake.hcl
  function "increment" {
      params = [number]
      result = number + 1
  }

  group "default" {
      targets = ["webapp"]
  }

  target "webapp" {
      args = {
          buildno = "${increment(123)}"
      }
  }
  EOF

  $ docker buildx bake --print webapp
  {
     "target": {
        "webapp": {
           "context": ".",
           "dockerfile": "Dockerfile",
           "args": {
              "buildno": "124"
           }
        }
     }
  }
  ```
@y
  ```console
  $ cat <<'EOF' > docker-bake.hcl
  function "increment" {
      params = [number]
      result = number + 1
  }

  group "default" {
      targets = ["webapp"]
  }

  target "webapp" {
      args = {
          buildno = "${increment(123)}"
      }
  }
  EOF

  $ docker buildx bake --print webapp
  {
     "target": {
        "webapp": {
           "context": ".",
           "dockerfile": "Dockerfile",
           "args": {
              "buildno": "124"
           }
        }
     }
  }
  ```
@z

@x
  Example of only adding tags if a variable is not empty using an `notequal`
  function:
@y
  Example of only adding tags if a variable is not empty using an `notequal`
  function:
@z

@x
  ```console
  $ cat <<'EOF' > docker-bake.hcl
  variable "TAG" {default="" }

  group "default" {
      targets = [
          "webapp",
      ]
  }

  target "webapp" {
      context="."
      dockerfile="Dockerfile"
      tags = [
          "my-image:latest",
          notequal("",TAG) ? "my-image:${TAG}": "",
      ]
  }
  EOF

  $ docker buildx bake --print webapp
  {
     "target": {
        "webapp": {
           "context": ".",
           "dockerfile": "Dockerfile",
           "tags": [
              "my-image:latest"
           ]
        }
     }
  }
  ```
@y
  ```console
  $ cat <<'EOF' > docker-bake.hcl
  variable "TAG" {default="" }

  group "default" {
      targets = [
          "webapp",
      ]
  }

  target "webapp" {
      context="."
      dockerfile="Dockerfile"
      tags = [
          "my-image:latest",
          notequal("",TAG) ? "my-image:${TAG}": "",
      ]
  }
  EOF

  $ docker buildx bake --print webapp
  {
     "target": {
        "webapp": {
           "context": ".",
           "dockerfile": "Dockerfile",
           "tags": [
              "my-image:latest"
           ]
        }
     }
  }
  ```
@z

@x
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@y
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@z
