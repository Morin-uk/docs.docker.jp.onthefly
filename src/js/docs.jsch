%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
// Right nav highlighting
var sidebarObj = (document.getElementsByClassName("sidebar")[0]) ? document.getElementsByClassName("sidebar")[0] : document.getElementsByClassName("sidebar-home")[0];
@y
// Right nav highlighting
var sidebarObj = (document.getElementsByClassName("sidebar")[0]) ? document.getElementsByClassName("sidebar")[0] : document.getElementsByClassName("sidebar-home")[0];
@z

@x
// ensure that the left nav visibly displays the current topic
var current = document.getElementsByClassName("active currentPage");
var body = document.getElementsByClassName("col-content content");
if (current[0]) {
    if (sidebarObj) {
        current[0].scrollIntoView(true);
        body[0].scrollIntoView(true);
    }
    // library hack
    if (document.location.pathname.indexOf("/samples/") > -1) {
        $(".currentPage").closest("ul").addClass("in");
    }
}
@y
// ensure that the left nav visibly displays the current topic
var current = document.getElementsByClassName("active currentPage");
var body = document.getElementsByClassName("col-content content");
if (current[0]) {
    if (sidebarObj) {
        current[0].scrollIntoView(true);
        body[0].scrollIntoView(true);
    }
    // library hack
    if (document.location.pathname.indexOf("/samples/") > -1) {
        $(".currentPage").closest("ul").addClass("in");
    }
}
@z

@x
function navClicked(sourceLink) {
    var classString = document.getElementById("#item" + sourceLink).className;
    if (classString.indexOf(" in") > -1) {
        //collapse
        document.getElementById("#item" + sourceLink).className = classString.replace(" in", "");
    } else {
        //expand
        document.getElementById("#item" + sourceLink).className = classString.concat(" in");
    }
}
@y
function navClicked(sourceLink) {
    var classString = document.getElementById("#item" + sourceLink).className;
    if (classString.indexOf(" in") > -1) {
        //collapse
        document.getElementById("#item" + sourceLink).className = classString.replace(" in", "");
    } else {
        //expand
        document.getElementById("#item" + sourceLink).className = classString.concat(" in");
    }
}
@z

@x
var outputLetNav = [];
var totalTopics = 0;
@y
var outputLetNav = [];
var totalTopics = 0;
@z

@x
function pageIsInSection(tree) {
    function processBranch(branch) {
        for (let k = 0; k < branch.length; k++) {
            if (branch[k].section) {
                processBranch(branch[k].section);
            } else {
                if (branch[k].path === pageURL && !branch[k].nosync) {
                    found = true;
                    break;
                }
            }
        }
    }

    let found = false;
    processBranch(tree);
    return found;
}
@y
function pageIsInSection(tree) {
    function processBranch(branch) {
        for (let k = 0; k < branch.length; k++) {
            if (branch[k].section) {
                processBranch(branch[k].section);
            } else {
                if (branch[k].path === pageURL && !branch[k].nosync) {
                    found = true;
                    break;
                }
            }
        }
    }

    let found = false;
    processBranch(tree);
    return found;
}
@z

@x
function walkTree(tree) {
    for (let j = 0; j < tree.length; j++) {
        totalTopics++;
        if (tree[j].section) {
            let sectionHasPath = pageIsInSection(tree[j].section);
            outputLetNav.push('<li><a onclick="navClicked(' + totalTopics + ')" data-target="#item' + totalTopics + '" data-toggle="collapse" data-parent="#stacked-menu"')
            if (sectionHasPath) {
                outputLetNav.push('aria-expanded="true"')
            } else {
                outputLetNav.push('class="collapsed" aria-expanded="false"')
            }
            outputLetNav.push(">" + tree[j].sectiontitle + '<span class="caret arrow"></span></a>');
            outputLetNav.push('<ul class="nav collapse');
            if (sectionHasPath) outputLetNav.push(" in");
            outputLetNav.push('" id="#item' + totalTopics + '" aria-expanded="');
            if (sectionHasPath) {
                outputLetNav.push("true");
            } else {
                outputLetNav.push("false");
            }
            outputLetNav.push('">');
            walkTree(tree[j].section);
            outputLetNav.push("</ul></li>");
        } else {
            // just a regular old topic; this is a leaf, not a branch; render a link!
            outputLetNav.push('<li><a href="' + tree[j].path + '"')
            if (tree[j].path === pageURL && !tree[j].nosync) {
                outputLetNav.push('class="active currentPage"')
            }
            outputLetNav.push(">" + tree[j].title + "</a></li>")
        }
    }
}
@y
function walkTree(tree) {
    for (let j = 0; j < tree.length; j++) {
        totalTopics++;
        if (tree[j].section) {
            let sectionHasPath = pageIsInSection(tree[j].section);
            outputLetNav.push('<li><a onclick="navClicked(' + totalTopics + ')" data-target="#item' + totalTopics + '" data-toggle="collapse" data-parent="#stacked-menu"')
            if (sectionHasPath) {
                outputLetNav.push('aria-expanded="true"')
            } else {
                outputLetNav.push('class="collapsed" aria-expanded="false"')
            }
            outputLetNav.push(">" + tree[j].sectiontitle + '<span class="caret arrow"></span></a>');
            outputLetNav.push('<ul class="nav collapse');
            if (sectionHasPath) outputLetNav.push(" in");
            outputLetNav.push('" id="#item' + totalTopics + '" aria-expanded="');
            if (sectionHasPath) {
                outputLetNav.push("true");
            } else {
                outputLetNav.push("false");
            }
            outputLetNav.push('">');
            walkTree(tree[j].section);
            outputLetNav.push("</ul></li>");
        } else {
            // just a regular old topic; this is a leaf, not a branch; render a link!
            outputLetNav.push('<li><a href="__URL__SUBBASEURL' + tree[j].path + '"')
            if (tree[j].path === pageURL && !tree[j].nosync) {
                outputLetNav.push('class="active currentPage"')
            }
            outputLetNav.push(">" + tree[j].title + "</a></li>")
        }
    }
}
@z

@x
function renderNav(docstoc) {
    for (let i = 0; i < docstoc.horizontalnav.length; i++) {
        if (docstoc.horizontalnav[i].path === pageURL || pageIsInSection(docstoc[docstoc.horizontalnav[i].node])) {
            // This is the current section. Set the corresponding header-nav link
            // to active, and build the left-hand (vertical) navigation
            document.getElementById(docstoc.horizontalnav[i].node).closest("li").classList.add("active")
            walkTree(docstoc[docstoc.horizontalnav[i].node]);
            document.getElementById("jsTOCLeftNav").innerHTML = outputLetNav.join("");
        }
    }
    // Scroll the current menu item into view. We actually pick the item *above*
    // the current item to give some headroom above
    scrollMenuItem("#jsTOCLeftNav a.currentPage")
}
@y
function renderNav(docstoc) {
    for (let i = 0; i < docstoc.horizontalnav.length; i++) {
        if (docstoc.horizontalnav[i].path === pageURL || pageIsInSection(docstoc[docstoc.horizontalnav[i].node])) {
            // This is the current section. Set the corresponding header-nav link
            // to active, and build the left-hand (vertical) navigation
            document.getElementById(docstoc.horizontalnav[i].node).closest("li").classList.add("active")
            walkTree(docstoc[docstoc.horizontalnav[i].node]);
            document.getElementById("jsTOCLeftNav").innerHTML = outputLetNav.join("");
        }
    }
    // Scroll the current menu item into view. We actually pick the item *above*
    // the current item to give some headroom above
    scrollMenuItem("#jsTOCLeftNav a.currentPage")
}
@z

@x
// Scroll the given menu item into view. We actually pick the item *above*
// the current item to give some headroom above
function scrollMenuItem(selector) {
    let item = document.querySelector(selector)
    if (item) {
        item = item.closest("li")
    }
    if (item) {
        item = item.previousElementSibling
    }
    if (item) {
        item.scrollIntoView(true)
        if (window.location.hash.length < 2) {
            // Scrolling the side-navigation may scroll the whole page as well
            // this is a dirty hack to scroll the main content back to the top
            // if we're not on a specific anchor
            document.querySelector("main.col-content").scrollIntoView(true)
        }
    }
}
@y
// Scroll the given menu item into view. We actually pick the item *above*
// the current item to give some headroom above
function scrollMenuItem(selector) {
    let item = document.querySelector(selector)
    if (item) {
        item = item.closest("li")
    }
    if (item) {
        item = item.previousElementSibling
    }
    if (item) {
        item.scrollIntoView(true)
        if (window.location.hash.length < 2) {
            // Scrolling the side-navigation may scroll the whole page as well
            // this is a dirty hack to scroll the main content back to the top
            // if we're not on a specific anchor
            document.querySelector("main.col-content").scrollIntoView(true)
        }
    }
}
@z

@x
function highlightRightNav(heading) {
    $("#my_toc a.active").removeClass("active");

    if (heading !== "title") {
        $("#my_toc a[href='#" + heading + "']").addClass("active");
    }
}
@y
function highlightRightNav(heading) {
    $("#my_toc a.active").removeClass("active");

    if (heading !== "title") {
        $("#my_toc a[href='#" + heading + "']").addClass("active");
    }
}
@z

@x
var currentHeading = "";
$(window).scroll(function () {
    var headingPositions = [];
    $("h1, h2, h3, h4, h5, h6").each(function () {
        if (this.id === "") this.id = "title";
        headingPositions[this.id] = this.getBoundingClientRect().top;
    });
    headingPositions.sort();
    // the headings have all been grabbed and sorted in order of their scroll
    // position (from the top of the page). First one is toppermost.
    for (var key in headingPositions) {
        if (!headingPositions.hasOwnProperty(key)) {
            continue;
        }
        if (headingPositions[key] > 0 && headingPositions[key] < 200) {
            if (currentHeading !== key) {
                // a new heading has scrolled to within 200px of the top of the page.
                // highlight the right-nav entry and de-highlight the others.
                highlightRightNav(key);
                currentHeading = key;
            }
            break;
        }
    }
});
@y
var currentHeading = "";
$(window).scroll(function () {
    var headingPositions = [];
    $("h1, h2, h3, h4, h5, h6").each(function () {
        if (this.id === "") this.id = "title";
        headingPositions[this.id] = this.getBoundingClientRect().top;
    });
    headingPositions.sort();
    // the headings have all been grabbed and sorted in order of their scroll
    // position (from the top of the page). First one is toppermost.
    for (var key in headingPositions) {
        if (!headingPositions.hasOwnProperty(key)) {
            continue;
        }
        if (headingPositions[key] > 0 && headingPositions[key] < 200) {
            if (currentHeading !== key) {
                // a new heading has scrolled to within 200px of the top of the page.
                // highlight the right-nav entry and de-highlight the others.
                highlightRightNav(key);
                currentHeading = key;
            }
            break;
        }
    }
});
@z

@x
// Cookie functions
function createCookie(name, value, days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + value + expires + "; path=/";
}
@y
// Cookie functions
function createCookie(name, value, days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + value + expires + "; path=/";
}
@z

@x
function readCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === " ") c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
@y
function readCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === " ") c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
@z

@x
var prefersDark = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
var selectedNightTheme = readCookie("night");
@y
var prefersDark = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
var selectedNightTheme = readCookie("night");
@z

@x
if (selectedNightTheme === "true" || (selectedNightTheme === null && prefersDark)) {
    applyNight();
    $("#switch-style").prop("checked", true);
} else {
    applyDay();
    $("#switch-style").prop("checked", false);
}
@y
if (selectedNightTheme === "true" || (selectedNightTheme === null && prefersDark)) {
    applyNight();
    $("#switch-style").prop("checked", true);
} else {
    applyDay();
    $("#switch-style").prop("checked", false);
}
@z

@x
/*
 *
 * toggle menu *********************************************************************
 *
 */
@y
/*
 *
 * toggle menu *********************************************************************
 *
 */
@z

@x
$("#menu-toggle").click(function (e) {
    e.preventDefault();
    $(".wrapper").toggleClass("right-open");
    $(".col-toc").toggleClass("col-toc-hidden");
});
@y
$("#menu-toggle").click(function (e) {
    e.preventDefault();
    $(".wrapper").toggleClass("right-open");
    $(".col-toc").toggleClass("col-toc-hidden");
});
@z

@x
$("#menu-toggle-left").click(function (e) {
    e.preventDefault();
    $(".col-nav").toggleClass("col-toc-hidden");
});
@y
$("#menu-toggle-left").click(function (e) {
    e.preventDefault();
    $(".col-nav").toggleClass("col-toc-hidden");
});
@z

@x
$(".navbar-toggle").click(function () {
    $("#sidebar-nav").each(function () {
        $(this).toggleClass("hidden-sm");
        $(this).toggleClass("hidden-xs");
    });
});
@y
$(".navbar-toggle").click(function () {
    $("#sidebar-nav").each(function () {
        $(this).toggleClass("hidden-sm");
        $(this).toggleClass("hidden-xs");
    });
});
@z

@x
var navHeight = $(".navbar").outerHeight(true) + 80;
@y
var navHeight = $(".navbar").outerHeight(true) + 80;
@z

@x
$(document.body).scrollspy({
    target: "#leftCol",
    offset: navHeight
});
@y
$(document.body).scrollspy({
    target: "#leftCol",
    offset: navHeight
});
@z

@x
function loadHash(hashObj) {
    // Using jQuery's animate() method to add smooth page scroll
    // The optional number (800) specifies the number of milliseconds it takes to scroll to the specified area
    $("html, body").animate({scrollTop: $(hashObj).offset().top - 80}, 800);
}
@y
function loadHash(hashObj) {
    // Using jQuery's animate() method to add smooth page scroll
    // The optional number (800) specifies the number of milliseconds it takes to scroll to the specified area
    $("html, body").animate({scrollTop: $(hashObj).offset().top - 80}, 800);
}
@z

@x
$(document).ready(function () {
    // Add smooth scrolling to all links
    $(".toc-nav a").on("click", function (event) {
        // Make sure this.hash has a value before overriding default behavior
        if (this.hash !== "") {
            // Prevent default anchor click behavior
            event.preventDefault();
@y
$(document).ready(function () {
    // Add smooth scrolling to all links
    $(".toc-nav a").on("click", function (event) {
        // Make sure this.hash has a value before overriding default behavior
        if (this.hash !== "") {
            // Prevent default anchor click behavior
            event.preventDefault();
@z

@x
            // Store hash
            var hash = this.hash;
            loadHash(hash);
@y
            // Store hash
            var hash = this.hash;
            loadHash(hash);
@z

@x
            // Add hash (#) to URL when done scrolling (default click behavior)
            window.location.hash = hash;
        }
    });
    if (window.location.hash) loadHash(window.location.hash);
});
@y
            // Add hash (#) to URL when done scrolling (default click behavior)
            window.location.hash = hash;
        }
    });
    if (window.location.hash) loadHash(window.location.hash);
});
@z

@x
$(document).ready(function () {
@y
$(document).ready(function () {
@z

@x
    // Add smooth scrolling to all links
    $(".nav-sidebar ul li a").on("click", function (event) {
@y
    // Add smooth scrolling to all links
    $(".nav-sidebar ul li a").on("click", function (event) {
@z

@x
        // Make sure this.hash has a value before overriding default behavior
        if (this.hash !== "") {
            // Prevent default anchor click behavior
            event.preventDefault();
@y
        // Make sure this.hash has a value before overriding default behavior
        if (this.hash !== "") {
            // Prevent default anchor click behavior
            event.preventDefault();
@z

@x
            // Store hash
            var hash = this.hash;
@y
            // Store hash
            var hash = this.hash;
@z

@x
            // Using jQuery's animate() method to add smooth page scroll
            // The optional number (800) specifies the number of milliseconds it takes to scroll to the specified area
            $("html, body").animate({
                scrollTop: $(hash).offset().top - 80
            }, 800, function () {
                // Add hash (#) to URL when done scrolling (default click behavior)
                window.location.hash = hash;
            });
        }
    });
});
@y
            // Using jQuery's animate() method to add smooth page scroll
            // The optional number (800) specifies the number of milliseconds it takes to scroll to the specified area
            $("html, body").animate({
                scrollTop: $(hash).offset().top - 80
            }, 800, function () {
                // Add hash (#) to URL when done scrolling (default click behavior)
                window.location.hash = hash;
            });
        }
    });
});
@z

@x
/*
 *
 * make dropdown show on hover *********************************************************************
 *
 */
@y
/*
 *
 * make dropdown show on hover *********************************************************************
 *
 */
@z

@x
$("ul.nav li.dropdown").hover(function () {
    $(this).find(".dropdown-menu").stop(true, true).delay(200).fadeIn(500);
}, function () {
    $(this).find(".dropdown-menu").stop(true, true).delay(200).fadeOut(500);
});
@y
$("ul.nav li.dropdown").hover(function () {
    $(this).find(".dropdown-menu").stop(true, true).delay(200).fadeIn(500);
}, function () {
    $(this).find(".dropdown-menu").stop(true, true).delay(200).fadeOut(500);
});
@z

@x
/*
 *
 * swapStyleSheet*********************************************************************
 *
 */
@y
/*
 *
 * swapStyleSheet*********************************************************************
 *
 */
@z

@x
function applyNight() {
    $("body").addClass("night");
}
@y
function applyNight() {
    $("body").addClass("night");
}
@z

@x
function applyDay() {
    $("body").removeClass("night");
}
@y
function applyDay() {
    $("body").removeClass("night");
}
@z

@x
$("#switch-style").change(function () {
    if ($(this).is(":checked")) {
        applyNight();
        createCookie("night", true, 999)
    } else {
        applyDay();
        createCookie("night", false, 999);
    }
});
@y
$("#switch-style").change(function () {
    if ($(this).is(":checked")) {
        applyNight();
        createCookie("night", true, 999)
    } else {
        applyDay();
        createCookie("night", false, 999);
    }
});
@z

@x
/*
 *
 * TEMP HACK For side menu*********************************************************************
 *
 */
@y
/*
 *
 * TEMP HACK For side menu*********************************************************************
 *
 */
@z

@x
$(".nav-sidebar ul li a").click(function () {
    $(this).addClass("collapse").siblings().toggleClass("in");
});
@y
$(".nav-sidebar ul li a").click(function () {
    $(this).addClass("collapse").siblings().toggleClass("in");
});
@z

@x
if ($(".nav-sidebar ul a.active").length !== 0) {
    $(".nav-sidebar ul").click(function () {
        $(this).addClass("collapse in").siblings;
    });
}
@y
if ($(".nav-sidebar ul a.active").length !== 0) {
    $(".nav-sidebar ul").click(function () {
        $(this).addClass("collapse in").siblings;
    });
}
@z

@x
/*
 *
 * Components *********************************************************************
 *
 */
@y
/*
 *
 * Components *********************************************************************
 *
 */
@z

@x
$(function () {
    $('[data-toggle="tooltip"]').tooltip()
});
@y
$(function () {
    $('[data-toggle="tooltip"]').tooltip()
});
@z

@x
// sync tabs with the same data-group
window.onload = function () {
    $(".nav-tabs > li > a").click(function (e) {
        var group = $(this).attr("data-group");
        $('.nav-tabs > li > a[data-group="' + group + '"]').tab("show");
    });
};
@y
// sync tabs with the same data-group
window.onload = function () {
    $(".nav-tabs > li > a").click(function (e) {
        var group = $(this).attr("data-group");
        $('.nav-tabs > li > a[data-group="' + group + '"]').tab("show");
    });
};
@z
