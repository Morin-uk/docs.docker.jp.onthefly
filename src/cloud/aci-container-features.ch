%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
---
title: ACI integration container features
description: Reference list of container ACI features
keywords: Docker, Azure, Integration, ACI, container, cli, deploy, cloud
---
@y
---
title: ACI 統合コンテナー機能
description: Reference list of container ACI features
keywords: Docker, Azure, Integration, ACI, container, cli, deploy, cloud
---
@z

@x
# Azure Container Instances: running single containerrs
@y
{: #azure-container-instances-running-single-containerrs } 
# Azure コンテナーインスタンス、単一コンテナーとしての実行
@z

@x
Single containers can be executed on ACI with the `docker run` command.
A single container is executed in its own ACI container group, that will container only one container.
@y
単一のコンテナーを ACI 上で実行するには`docker run`を用います。
1 つのコンテナーは、これに対応する ACI コンテナーグループ内において実行され、このグループ内にはこの 1 つのコンテナーのみが含まれます。
@z

@x
Containers can be listed with the `docker ps` command, and stopped and removed with `docker stop <CONTAINER>` and `docker rm <CONTAINER>`.
@y
コンテナーの一覧は`docker ps`コマンドを使って確認します。
またコンテナーの停止や削除は`docker stop <CONTAINER>`および`docker rm <CONTAINER>`を使って行います。
@z

@x
# Docker run options for ACI containers
@y
{: #docker-run-options-for-aci-containers }
# ACI コンテナーに対する Docker run オプション
@z

@x
The table below lists supported `docker run` flags and their ACI counterparts.
@y
以下の一覧表では、サポートされている`docker run`フラグとその ACI 対応機能について示します。
@z

@x
__Legend:__
@y
__凡例__
@z

@x
- __✓:__ Implemented
- __n:__ Not yet implemented
- __x:__ Not applicable / no available conversion
@y
- __✓:__ 実装済
- __n:__ 未実装
- __x:__ 適用不可 / 変換不能
@z

@x
| Flag                  |Map|  Notes
|-----------------------|---|---------------------------------|
| --cpus                | ✓ | See [Container Resources](#container-resources).
| -d, --detach          | ✓ | Detach from container logs when container starts. By default, the command line stays attached and follow container logs.
| --domainname          | ✓ | See [Exposing ports](#exposing-ports).
| --e, --env            | ✓ | Sets environment variable.
| --env-file            | ✓ | Sets environment variable from and external file.
| --health-cmd          | ✓ | Specify healthcheck command. See [Healthchecks](#healthchecks).
| --health-interval     | ✓ | Specify healthcheck interval
| --health-retries      | ✓ | Specify healthcheck number of retries
| --health-start-period | ✓ | Specify healthcheck initial delay
| --health-timeout      | ✓ | Specify healthcheck timeout
| -l, --label           | x | Unsupported in Docker ACI integration, due to limitations of ACI Tags.
| -m, --memory          | ✓ | See [Container Resources](#container-resources).
| --name                | ✓ | Provide a name for the container. Name must be unique withing the ACI resource group. a name is generated by default.
| -p, --publish         | ✓ | See [Exposing ports](#exposing-ports). Only symetrical port mapping is supported in ACI.
| --restart             | ✓ | Restart policy, must be one of: `always`, `no`, `on-failure`.
| --rm                  | x | Not supported as [ACI does not support auto-delete containers](https://feedback.azure.com/forums/602224-azure-container-instances/suggestions/34066633-support-auto-delete-of-aci-when-container-exits-no).
| -v, --volume          | ✓ | See [Persistent Volumes](#persistent-volumes).
@y
| フラグ                |記号|  内容
|-----------------------|----|---------------------------------|
| --cpus                | ✓ | [コンテナーリソース](#container-resources) 参照。
| -d, --detach          | ✓ | コンテナー起動時にコンテナーログをデタッチします。デフォルトではコマンドラインにアタッチされコンテナーログが出力されます。
| --domainname          | ✓ | [ポート公開](#exposing-ports) 参照。
| --e, --env            | ✓ | 環境変数を設定します。
| --env-file            | ✓ | 外部ファイルを利用して環境変数を設定します。
| --health-cmd          | ✓ | ヘルスチェックコマンドを指定します。[ヘルスチェック](#healthchecks) 参照。
| --health-interval     | ✓ | ヘルスチェック間隔を指定します。
| --health-retries      | ✓ | ヘルスチェックのリトライ数を指定します。
| --health-start-period | ✓ | ヘルスチェックの初期遅延時間を指定します。
| --health-timeout      | ✓ | ヘルスチェックのタイムアウトを指定します。
| -l, --label           | x | Docker ACI 統合においてはサポートされません。ACI Tags の制限によるためです。
| -m, --memory          | ✓ | [コンテナーリソース](#container-resources) 参照。
| --name                | ✓ | コンテナー名を指定します。この名前は ACI リソースグループ内でユニークであることが必要です。この名前はデフォルトで生成されます。
| -p, --publish         | ✓ | [ポート公開](#exposing-ports) 参照。ACI では同一ポートのマッピングのみサポートされます。
| --restart             | ✓ | 再起動ポリシー。以下のいずれか： `always`、`no`、`on-failure`
| --rm                  | x | [ACI ではコンテナーの自動削除がサポートされません](https://feedback.azure.com/forums/602224-azure-container-instances/suggestions/34066633-support-auto-delete-of-aci-when-container-exits-no)。このため本フラグはサポートされません。
| -v, --volume          | ✓ | [永続的ボリューム](#persistent-volumes) 参照。
@z

@x
## Exposing ports
@y
{: #exposing-ports }
## ポート公開
@z

@x
You can expose one or more ports of a container with `docker run -p <PORT>:<PORT>`
If ports are exposed when running a container, the corresponding ACI container group will be exposed with a public IP allocated and the required port(s) accessible.
@y
コンテナーのポートは複数公開することが可能であり、`docker run -p <PORT>:<PORT>`を使って行います。
コンテナー実行時にポートが公開されていれば、公開 IP アドレスが割り当てられ必要なポートがアクセス可能となります。
そしてこれに応じた ACI コンテナーグループが公開されます。
@z

@x
> Note: [ACI does not support port mapping](https://feedback.azure.com/forums/602224-azure-container-instances/suggestions/34082284-support-for-port-mapping), so the same port number must be specified when using `-p <PORT>:<PORT>`.
@y
> メモ
>
> [ACI ではポートマッピングには対応していません](https://feedback.azure.com/forums/602224-azure-container-instances/suggestions/34082284-support-for-port-mapping)。
> したがって`-p <PORT>:<PORT>`を利用するにあたっては、同一のポート番号を指定する必要があります。
@z

@x
When exposing ports, a container can also specify the service `--domainname` flag to set a DNS hostname. `domainname` will be used to specify the ACI DNS Label Name, and the ACI container group will be reachable at `<DOMAINNANE>.<REGION>.azurecontainer.io`.
`domainname` must be unique globally in <REGION>.azurecontainer.io
@y
ポートの公開にあたっては、`--domainname`フラグを用いることで、コンテナーに対するサービスの DNS ホスト名を設定することもできます。
`domainname`は ACI の DNS ラベル名の指定に利用されます。
そして ACI コンテナーグループは`<DOMAINNANE>.<REGION>.azurecontainer.io`としてアクセス可能になります。
なお`domainname`は`<REGION>.azurecontainer.io`内においてグローバルにユニークでなければなりません。
@z

@x
## Persistent volumes
@y
{: #persistent-volumes }
## 永続的ボリューム
@z

@x
Docker volumes are mapped to Azure File shares, each file share is part of an Azure Storage Account.
One or more volumes can be specified with `docker run -v <STORAGE-ACCOUNT>/<FILESHARE>:<TARGET-PATH>`.
@y
Docker ボリュームは Azure ファイル共有にマッピングされます。
各ファイル共有は Azure ストレージアカウントの一部です。
ボリュームは複数指定することが可能で、`docker run -v <STORAGE-ACCOUNT>/<FILESHARE>:<TARGET-PATH>`を使って指定します。
@z

@x
A run command can use the `--volume` or `-v` flag several times for different volumes. The volumes can use the same or different storage accounts. The target paths for different volume mounts must be different and not overlap.
There is no support for mounting a single file, or mounting a subfolder from an Azure File Share.
@y
`run`コマンドにおいては`--volume`フラグや`-v`フラグを複数用いることにより、複数ボリュームを指定することができます。
ボリュームに対して利用するストレージアカウントは、同一でも異なっていても構いません。
異なるボリュームをマウントする対象パスは、それぞれに異なっている必要があり、重複してはなりません。
単一ファイルのマウントや Azure ファイル共有におけるサブフォルダーのマウントはサポートされません。
@z

@x
Credentials for storage accounts will be automatically fetched at deployment time using the Azure login to retrieve the storage account key for each storage account used.
@y
ストレージアカウントに対する資格情報は、デプロイの際に自動的に取得されます。
各ストレージアカウントが利用される際に、Azure ログイン情報を利用してストレージアカウント鍵が抽出されます。
@z

@x
## Container Resources
@y
{: #container-resources }
## コンテナーリソース
@z

@x
CPU and memory reservations can be set when running containers with `docker run --cpus 1.5 --memory 2G`.
@y
CPU とメモリのリソース予約は、コンテナー起動時に`docker run --cpus 1.5 --memory 2G`のようにして設定することができます。
@z

@x
It is not possible to set resource limits that differ from resource reservation on single containers.
ACI allows setting resource limits for containers in a container group but these limits must stay within the reserved resources for the entire group. In the case of a single container deployed in a container group, the resource limits must be equal to the resource reservation.
@y
単一のコンテナーにおいては、リソース予約量とは異なるリソース制約を設定することはできません。
ACI におけるリソース制約は、1 つのコンテナーグループにあるコンテナーに対して行います。
ただしこの制約は、全体のグループに対して予約されたリソース範囲内でなければなりません。
1 つのコンテナーグループ内にデプロイされているコンテナーが 1 つである場合は、リソース制約はリソース予約と等しくなければなりません。
@z

@x
## Logs
@y
{: #logs }
## ログ
@z

@x
You can view container logs with the command `docker logs <CONTAINER-ID>`.
@y
コンテナーのログは、コマンド`docker logs <CONTAINER-ID>`を使って確認することができます。
@z

@x
You can follow logs with the `--follow` (`-f`) option.
When running a container with `docker run`, by default the command line stays attached to container logs when the container starts. Use `docker run --detach` to not follow logs once the container starts.
@y
ログを監視するには`--follow`（`-f`）オプションを指定します。
`docker run`によってコンテナーが起動されると、起動時にデフォルトでそのコマンドラインにコンテナーログが接続されます。
コンテナー起動時にログを監視しない場合は`docker run --detach`とします。
@z

@x
> Note: Following ACI logs may have display issues especially when resizing a terminal that is following container logs. This is due to ACI providing raw log pulling but no streaming of logs. Logs are effectively pulled every 2 seconds when following logs.
@y
> メモ
>
> ACI ログの監視にあたっては出力に問題が発生するかもしれません。
> 特にコンテナーログを監視している端末画面をリサイズした場合に発生します。
> これは ACI のログ機能が低レベルのログ取得処理となっていて、ログストリーム処理にはなっていないためです。
> 監視中のログは、実際には 2 秒ごとに取得されます。
@z

@x
## Healthchecks
@y
{: #healthchecks }
## ヘルスチェック
@z

@x
A health check can be described using the flags prefixed by `--health-`. This is translated into `LivenessProbe` for ACI. If the health check fails then the container is considered unhealthy and terminated.
In order for the container to be restarted automatically, the container needs to be run with a restart policy (set by the `--restart` flag) other than `no`. Note that the default restart policy if one isn't set is `no`.
@y
ヘルスチェックは先頭に`--health-`がつくフラグを使って設定します。
これは ACI の`LivenessProbe`に変換されます。
ヘルスチェックが失敗すると、そのコンテナーは健康でない（unhealthy）とされ停止します。
コンテナーを自動的に再起動するためには、コンテナーの起動時に再起動ポリシーを設定しておくことが必要です。
再起動ポリシーは`--restart`フラグを用い、その設定値には`no`以外を指定します。
再起動ポリシーが指定されていない場合のデフォルトは`no`となることに注意してください。
@z

@x
In order to restart automatically, the container also need to have a restart policy set with `--restart` (`docker run` defaults to no restart policy)
@y
再起動を自動化するためには、コンテナーも`--restart`により指定される再起動ポリシーを持っておくことが必要です。
（`docker run`実行時のデフォルトは、再起動ポリシーが`no`になります。）
@z
