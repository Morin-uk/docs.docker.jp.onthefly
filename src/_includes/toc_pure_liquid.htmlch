%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
{% capture tocWorkspace %}
    {% comment %}
        "...like all things liquid - where there's a will, and ~36 hours to spare, there's usually a/some way" ~jaybe
        Usage:
            {% include toc_pure_liquid.html html=content sanitize=true class="inline_toc" id="my_toc" toc_min=2 toc_max=3 %}
@y
{% capture tocWorkspace %}
    {% comment %}
        "...like all things liquid - where there's a will, and ~36 hours to spare, there's usually a/some way" ~jaybe
        Usage:
            {% include toc_pure_liquid.html html=content sanitize=true class="inline_toc" id="my_toc" toc_min=2 toc_max=3 %}
@z

@x
        Variables:
            * html (string) - the HTML of compiled markdown generated by kramdown in Jekyll
            * sanitize (bool) - when set to true, the headers will be sanitized in the TOC
            * class (string) - a CSS class assigned to the TOC
            * id (string) - an ID to assigned to the TOC
            * toc_min (int) - the minimum TOC header level to use (if not set, check page, then site, then default to 2)
            * toc_max (int) - the maximum TOC header level to use (if not set, check page, then site, then default to 3)
@y
        Variables:
            * html (string) - the HTML of compiled markdown generated by kramdown in Jekyll
            * sanitize (bool) - when set to true, the headers will be sanitized in the TOC
            * class (string) - a CSS class assigned to the TOC
            * id (string) - an ID to assigned to the TOC
            * toc_min (int) - the minimum TOC header level to use (if not set, check page, then site, then default to 2)
            * toc_max (int) - the maximum TOC header level to use (if not set, check page, then site, then default to 3)
@z

@x
        Output:
            An unordered list representing the table of contents of a markdown block. This snippet will only generate the table of contents and will NOT output the markdown given to it
    {% endcomment %}
@y
        Output:
            An unordered list representing the table of contents of a markdown block. This snippet will only generate the table of contents and will NOT output the markdown given to it
    {% endcomment %}
@z

@x
    {% capture my_toc %}{% endcapture %}
    {% assign minHeader = include.toc_min | default: 2 %}
    {% assign maxHeader = include.toc_max | default: 3 %}
    {% assign nodes = include.html | split: '<h' %}
@y
    {% capture my_toc %}{% endcapture %}
    {% assign minHeader = include.toc_min | default: 2 %}
    {% assign maxHeader = include.toc_max | default: 3 %}
    {% assign nodes = include.html | split: '<h' %}
@z

@x
    {% for node in nodes %}
        {% if node == "" %}
            {% continue %}
        {% endif %}
@y
    {% for node in nodes %}
        {% if node == "" %}
            {% continue %}
        {% endif %}
@z

@x
        {% assign headerLevel = node | replace: '"', '' | slice: 0, 1 %}
        {% assign headerLevel = headerLevel | times: 1 %}
        {% assign indentAmount = headerLevel | minus: minHeader | add: 1 %}
        {% assign _workspace = node | split: '</h' %}
@y
        {% assign headerLevel = node | replace: '"', '' | slice: 0, 1 %}
        {% assign headerLevel = headerLevel | times: 1 %}
        {% assign indentAmount = headerLevel | minus: minHeader | add: 1 %}
        {% assign _workspace = node | split: '</h' %}
@z

@x
        {% unless headerLevel >= minHeader %}
            {% continue %}
        {% endunless %}
@y
        {% unless headerLevel >= minHeader %}
            {% continue %}
        {% endunless %}
@z

@x
        {% if headerLevel > maxHeader %}
            {% continue %}
        {% endif %}
@y
        {% if headerLevel > maxHeader %}
            {% continue %}
        {% endif %}
@z

@x
        {% assign _idWorkspace = _workspace[0] | split: '"' %}
        {% assign html_id = _idWorkspace[1] %}
@y
        {% assign _idWorkspace = _workspace[0] | split: '"' %}
        {% assign html_id = _idWorkspace[1] %}
@z

@x
        {% capture _hAttrToStrip %}{{ headerLevel }} id="{{ html_id }}">{% endcapture %}
        {% assign header = _workspace[0] | replace: _hAttrToStrip, '' | remove_first: "1>" %}
@y
        {% capture _hAttrToStrip %}{{ headerLevel }} id="{{ html_id }}">{% endcapture %}
        {% assign header = _workspace[0] | replace: _hAttrToStrip, '' | remove_first: "1>" %}
@z

@x
        {% assign space = '' %}
        {% for i in (1..indentAmount) %}
            {% assign space = space | prepend: '  ' %}
        {% endfor %}
@y
        {% assign space = '' %}
        {% for i in (1..indentAmount) %}
            {% assign space = space | prepend: '  ' %}
        {% endfor %}
@z

@x
        {% capture my_toc %}{{ my_toc }}
{{ space }}- [{% if include.sanitize %}{{ header | strip_html }}{% else %}{{ header }}{% endif %}](#{{ html_id }}){: class="nomunge" }{% endcapture %}
@y
        {% capture my_toc %}{{ my_toc }}
{{ space }}- [{% if include.sanitize %}{{ header | strip_html }}{% else %}{{ header }}{% endif %}](#{{ html_id }}){: class="nomunge" }{% endcapture %}
@z

@x
    {% endfor %}
@y
    {% endfor %}
@z

@x
    {% if include.class %}
        {% capture my_toc %}{:.{{ include.class }}}
{{ my_toc | lstrip }}{% endcapture %}
    {% endif %}
@y
    {% if include.class %}
        {% capture my_toc %}{:.{{ include.class }}}
{{ my_toc | lstrip }}{% endcapture %}
    {% endif %}
@z

@x
    {% if include.id %}
        {% capture my_toc %}{: #{{ include.id }}}
{{ my_toc | lstrip }}{% endcapture %}
    {% endif %}
{% endcapture %}{% assign tocWorkspace = '' %}
{{ my_toc | markdownify }}
@y
    {% if include.id %}
        {% capture my_toc %}{: #{{ include.id }}}
{{ my_toc | lstrip }}{% endcapture %}
    {% endif %}
{% endcapture %}{% assign tocWorkspace = '' %}
{{ my_toc | markdownify }}
@z
